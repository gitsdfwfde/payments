/* Mysterium network payment library.
 *
 * Copyright (C) 2021 BlockDev AG
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HermesImplementationABI is the input ABI used to generate the binding from.
const HermesImplementationABI = "[{\"anonymous\":false,\"inputs\":[],\"name\":\"ChannelOpeningActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChannelOpeningPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"FundsWithdrawned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"HermesClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"validFromBlock\",\"type\":\"uint64\"}],\"name\":\"HermesFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"}],\"name\":\"HermesPunishmentActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HermesPunishmentDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"HermesStakeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxStake\",\"type\":\"uint256\"}],\"name\":\"MaxStakeValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"MinStakeValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSentToBeneficiary\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"PromiseSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUsedNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punishment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"getChannelId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getChannelId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHermesStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumHermesImplementation.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_dexAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToStake\",\"type\":\"uint256\"}],\"name\":\"openChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settlePromise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_beneficiarySignature\",\"type\":\"bytes\"}],\"name\":\"payAndSettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_promiseSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_beneficiarySignature\",\"type\":\"bytes\"}],\"name\":\"settleWithBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleWithDEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleIntoStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"decreaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolveEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxStake\",\"type\":\"uint256\"}],\"name\":\"setMaxStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setHermesFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionalStake\",\"type\":\"uint256\"}],\"name\":\"increaseHermesStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"}],\"name\":\"isChannelOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHermesActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseChannelOpening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateChannelOpening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeHermes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getStakeBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateHermesFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalExpectedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"validatePromise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// HermesImplementationBin is the compiled bytecode used for deploying new contracts.
var HermesImplementationBin = ""

// DeployHermesImplementation deploys a new Ethereum contract, binding an instance of HermesImplementation to it.
func DeployHermesImplementation(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *HermesImplementation, error) {
	parsed, err := abi.JSON(strings.NewReader(HermesImplementationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(HermesImplementationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &HermesImplementation{HermesImplementationCaller: HermesImplementationCaller{contract: contract}, HermesImplementationTransactor: HermesImplementationTransactor{contract: contract}, HermesImplementationFilterer: HermesImplementationFilterer{contract: contract}}, nil
}

// HermesImplementation is an auto generated Go binding around an Ethereum contract.
type HermesImplementation struct {
	HermesImplementationCaller     // Read-only binding to the contract
	HermesImplementationTransactor // Write-only binding to the contract
	HermesImplementationFilterer   // Log filterer for contract events
}

// HermesImplementationCaller is an auto generated read-only Go binding around an Ethereum contract.
type HermesImplementationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HermesImplementationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HermesImplementationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HermesImplementationSession struct {
	Contract     *HermesImplementation // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// HermesImplementationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HermesImplementationCallerSession struct {
	Contract *HermesImplementationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// HermesImplementationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HermesImplementationTransactorSession struct {
	Contract     *HermesImplementationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// HermesImplementationRaw is an auto generated low-level Go binding around an Ethereum contract.
type HermesImplementationRaw struct {
	Contract *HermesImplementation // Generic contract binding to access the raw methods on
}

// HermesImplementationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HermesImplementationCallerRaw struct {
	Contract *HermesImplementationCaller // Generic read-only contract binding to access the raw methods on
}

// HermesImplementationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HermesImplementationTransactorRaw struct {
	Contract *HermesImplementationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHermesImplementation creates a new instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementation(address common.Address, backend bind.ContractBackend) (*HermesImplementation, error) {
	contract, err := bindHermesImplementation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &HermesImplementation{HermesImplementationCaller: HermesImplementationCaller{contract: contract}, HermesImplementationTransactor: HermesImplementationTransactor{contract: contract}, HermesImplementationFilterer: HermesImplementationFilterer{contract: contract}}, nil
}

// NewHermesImplementationCaller creates a new read-only instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationCaller(address common.Address, caller bind.ContractCaller) (*HermesImplementationCaller, error) {
	contract, err := bindHermesImplementation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationCaller{contract: contract}, nil
}

// NewHermesImplementationTransactor creates a new write-only instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationTransactor(address common.Address, transactor bind.ContractTransactor) (*HermesImplementationTransactor, error) {
	contract, err := bindHermesImplementation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationTransactor{contract: contract}, nil
}

// NewHermesImplementationFilterer creates a new log filterer instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationFilterer(address common.Address, filterer bind.ContractFilterer) (*HermesImplementationFilterer, error) {
	contract, err := bindHermesImplementation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationFilterer{contract: contract}, nil
}

// bindHermesImplementation binds a generic wrapper to an already deployed contract.
func bindHermesImplementation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HermesImplementationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HermesImplementation *HermesImplementationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HermesImplementation.Contract.HermesImplementationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HermesImplementation *HermesImplementationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.Contract.HermesImplementationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HermesImplementation *HermesImplementationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HermesImplementation.Contract.HermesImplementationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HermesImplementation *HermesImplementationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HermesImplementation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HermesImplementation *HermesImplementationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HermesImplementation *HermesImplementationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HermesImplementation.Contract.contract.Transact(opts, method, params...)
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) AvailableBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "availableBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) AvailableBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.AvailableBalance(&_HermesImplementation.CallOpts)
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) AvailableBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.AvailableBalance(&_HermesImplementation.CallOpts)
}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) CalculateHermesFee(opts *bind.CallOpts, _amount *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "calculateHermesFee", _amount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) CalculateHermesFee(_amount *big.Int) (*big.Int, error) {
	return _HermesImplementation.Contract.CalculateHermesFee(&_HermesImplementation.CallOpts, _amount)
}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) CalculateHermesFee(_amount *big.Int) (*big.Int, error) {
	return _HermesImplementation.Contract.CalculateHermesFee(&_HermesImplementation.CallOpts, _amount)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(uint256 settled, uint256 stake, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationCaller) Channels(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Settled       *big.Int
	Stake         *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "channels", arg0)

	outstruct := new(struct {
		Settled       *big.Int
		Stake         *big.Int
		LastUsedNonce *big.Int
		Timelock      *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Settled = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Stake = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.LastUsedNonce = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Timelock = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(uint256 settled, uint256 stake, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationSession) Channels(arg0 [32]byte) (struct {
	Settled       *big.Int
	Stake         *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	return _HermesImplementation.Contract.Channels(&_HermesImplementation.CallOpts, arg0)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(uint256 settled, uint256 stake, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationCallerSession) Channels(arg0 [32]byte) (struct {
	Settled       *big.Int
	Stake         *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	return _HermesImplementation.Contract.Channels(&_HermesImplementation.CallOpts, arg0)
}

// GetActiveFee is a free data retrieval call binding the contract method 0x8d886fac.
//
// Solidity: function getActiveFee() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) GetActiveFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getActiveFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetActiveFee is a free data retrieval call binding the contract method 0x8d886fac.
//
// Solidity: function getActiveFee() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) GetActiveFee() (*big.Int, error) {
	return _HermesImplementation.Contract.GetActiveFee(&_HermesImplementation.CallOpts)
}

// GetActiveFee is a free data retrieval call binding the contract method 0x8d886fac.
//
// Solidity: function getActiveFee() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) GetActiveFee() (*big.Int, error) {
	return _HermesImplementation.Contract.GetActiveFee(&_HermesImplementation.CallOpts)
}

// GetChannelId is a free data retrieval call binding the contract method 0xe1791b2d.
//
// Solidity: function getChannelId(address _identity, string _type) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCaller) GetChannelId(opts *bind.CallOpts, _identity common.Address, _type string) ([32]byte, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getChannelId", _identity, _type)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetChannelId is a free data retrieval call binding the contract method 0xe1791b2d.
//
// Solidity: function getChannelId(address _identity, string _type) view returns(bytes32)
func (_HermesImplementation *HermesImplementationSession) GetChannelId(_identity common.Address, _type string) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId(&_HermesImplementation.CallOpts, _identity, _type)
}

// GetChannelId is a free data retrieval call binding the contract method 0xe1791b2d.
//
// Solidity: function getChannelId(address _identity, string _type) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCallerSession) GetChannelId(_identity common.Address, _type string) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId(&_HermesImplementation.CallOpts, _identity, _type)
}

// GetChannelId0 is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCaller) GetChannelId0(opts *bind.CallOpts, _identity common.Address) ([32]byte, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getChannelId0", _identity)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetChannelId0 is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationSession) GetChannelId0(_identity common.Address) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId0(&_HermesImplementation.CallOpts, _identity)
}

// GetChannelId0 is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCallerSession) GetChannelId0(_identity common.Address) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId0(&_HermesImplementation.CallOpts, _identity)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetFundsDestination(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getFundsDestination")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetFundsDestination() (common.Address, error) {
	return _HermesImplementation.Contract.GetFundsDestination(&_HermesImplementation.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetFundsDestination() (common.Address, error) {
	return _HermesImplementation.Contract.GetFundsDestination(&_HermesImplementation.CallOpts)
}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) GetHermesStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getHermesStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) GetHermesStake() (*big.Int, error) {
	return _HermesImplementation.Contract.GetHermesStake(&_HermesImplementation.CallOpts)
}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) GetHermesStake() (*big.Int, error) {
	return _HermesImplementation.Contract.GetHermesStake(&_HermesImplementation.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetOperator() (common.Address, error) {
	return _HermesImplementation.Contract.GetOperator(&_HermesImplementation.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetOperator() (common.Address, error) {
	return _HermesImplementation.Contract.GetOperator(&_HermesImplementation.CallOpts)
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetRegistry() (common.Address, error) {
	return _HermesImplementation.Contract.GetRegistry(&_HermesImplementation.CallOpts)
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetRegistry() (common.Address, error) {
	return _HermesImplementation.Contract.GetRegistry(&_HermesImplementation.CallOpts)
}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationCaller) GetStakeThresholds(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getStakeThresholds")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationSession) GetStakeThresholds() (*big.Int, *big.Int, error) {
	return _HermesImplementation.Contract.GetStakeThresholds(&_HermesImplementation.CallOpts)
}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationCallerSession) GetStakeThresholds() (*big.Int, *big.Int, error) {
	return _HermesImplementation.Contract.GetStakeThresholds(&_HermesImplementation.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationCaller) GetStatus(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getStatus")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationSession) GetStatus() (uint8, error) {
	return _HermesImplementation.Contract.GetStatus(&_HermesImplementation.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationCallerSession) GetStatus() (uint8, error) {
	return _HermesImplementation.Contract.GetStatus(&_HermesImplementation.CallOpts)
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsChannelOpened(opts *bind.CallOpts, _channelId [32]byte) (bool, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "isChannelOpened", _channelId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsChannelOpened(_channelId [32]byte) (bool, error) {
	return _HermesImplementation.Contract.IsChannelOpened(&_HermesImplementation.CallOpts, _channelId)
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsChannelOpened(_channelId [32]byte) (bool, error) {
	return _HermesImplementation.Contract.IsChannelOpened(&_HermesImplementation.CallOpts, _channelId)
}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsHermesActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "isHermesActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsHermesActive() (bool, error) {
	return _HermesImplementation.Contract.IsHermesActive(&_HermesImplementation.CallOpts)
}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsHermesActive() (bool, error) {
	return _HermesImplementation.Contract.IsHermesActive(&_HermesImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsInitialized() (bool, error) {
	return _HermesImplementation.Contract.IsInitialized(&_HermesImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsInitialized() (bool, error) {
	return _HermesImplementation.Contract.IsInitialized(&_HermesImplementation.CallOpts)
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCaller) LastFee(opts *bind.CallOpts) (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "lastFee")

	outstruct := new(struct {
		Value     uint16
		ValidFrom uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(uint16)).(*uint16)
	outstruct.ValidFrom = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationSession) LastFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.LastFee(&_HermesImplementation.CallOpts)
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCallerSession) LastFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.LastFee(&_HermesImplementation.CallOpts)
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) MinimalExpectedBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "minimalExpectedBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) MinimalExpectedBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.MinimalExpectedBalance(&_HermesImplementation.CallOpts)
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) MinimalExpectedBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.MinimalExpectedBalance(&_HermesImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationSession) Owner() (common.Address, error) {
	return _HermesImplementation.Contract.Owner(&_HermesImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) Owner() (common.Address, error) {
	return _HermesImplementation.Contract.Owner(&_HermesImplementation.CallOpts)
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCaller) PreviousFee(opts *bind.CallOpts) (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "previousFee")

	outstruct := new(struct {
		Value     uint16
		ValidFrom uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(uint16)).(*uint16)
	outstruct.ValidFrom = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationSession) PreviousFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.PreviousFee(&_HermesImplementation.CallOpts)
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCallerSession) PreviousFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.PreviousFee(&_HermesImplementation.CallOpts)
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlock, uint256 amount)
func (_HermesImplementation *HermesImplementationCaller) Punishment(opts *bind.CallOpts) (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "punishment")

	outstruct := new(struct {
		ActivationBlock *big.Int
		Amount          *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ActivationBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlock, uint256 amount)
func (_HermesImplementation *HermesImplementationSession) Punishment() (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	return _HermesImplementation.Contract.Punishment(&_HermesImplementation.CallOpts)
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlock, uint256 amount)
func (_HermesImplementation *HermesImplementationCallerSession) Punishment() (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	return _HermesImplementation.Contract.Punishment(&_HermesImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationSession) Token() (common.Address, error) {
	return _HermesImplementation.Contract.Token(&_HermesImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) Token() (common.Address, error) {
	return _HermesImplementation.Contract.Token(&_HermesImplementation.CallOpts)
}

// ValidatePromise is a free data retrieval call binding the contract method 0x70603a7f.
//
// Solidity: function validatePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) ValidatePromise(opts *bind.CallOpts, _channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (bool, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "validatePromise", _channelId, _amount, _transactorFee, _preimage, _signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatePromise is a free data retrieval call binding the contract method 0x70603a7f.
//
// Solidity: function validatePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) view returns(bool)
func (_HermesImplementation *HermesImplementationSession) ValidatePromise(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (bool, error) {
	return _HermesImplementation.Contract.ValidatePromise(&_HermesImplementation.CallOpts, _channelId, _amount, _transactorFee, _preimage, _signature)
}

// ValidatePromise is a free data retrieval call binding the contract method 0x70603a7f.
//
// Solidity: function validatePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) ValidatePromise(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (bool, error) {
	return _HermesImplementation.Contract.ValidatePromise(&_HermesImplementation.CallOpts, _channelId, _amount, _transactorFee, _preimage, _signature)
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactor) ActivateChannelOpening(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "activateChannelOpening")
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationSession) ActivateChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ActivateChannelOpening(&_HermesImplementation.TransactOpts)
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ActivateChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ActivateChannelOpening(&_HermesImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationTransactor) ClaimEthers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "claimEthers")
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationSession) ClaimEthers() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimEthers(&_HermesImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ClaimEthers() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimEthers(&_HermesImplementation.TransactOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationTransactor) ClaimTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "claimTokens", _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimTokens(&_HermesImplementation.TransactOpts, _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimTokens(&_HermesImplementation.TransactOpts, _token)
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationTransactor) CloseHermes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "closeHermes")
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationSession) CloseHermes() (*types.Transaction, error) {
	return _HermesImplementation.Contract.CloseHermes(&_HermesImplementation.TransactOpts)
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) CloseHermes() (*types.Transaction, error) {
	return _HermesImplementation.Contract.CloseHermes(&_HermesImplementation.TransactOpts)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0x7295973a.
//
// Solidity: function decreaseStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) DecreaseStake(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "decreaseStake", _identity, _amount, _transactorFee, _signature)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0x7295973a.
//
// Solidity: function decreaseStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) DecreaseStake(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.DecreaseStake(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _signature)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0x7295973a.
//
// Solidity: function decreaseStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) DecreaseStake(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.DecreaseStake(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _signature)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationTransactor) GetStakeBack(opts *bind.TransactOpts, _beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "getStakeBack", _beneficiary)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationSession) GetStakeBack(_beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.GetStakeBack(&_HermesImplementation.TransactOpts, _beneficiary)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) GetStakeBack(_beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.GetStakeBack(&_HermesImplementation.TransactOpts, _beneficiary)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) IncreaseHermesStake(opts *bind.TransactOpts, _additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "increaseHermesStake", _additionalStake)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationSession) IncreaseHermesStake(_additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseHermesStake(&_HermesImplementation.TransactOpts, _additionalStake)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) IncreaseHermesStake(_additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseHermesStake(&_HermesImplementation.TransactOpts, _additionalStake)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactor) IncreaseStake(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "increaseStake", _channelId, _amount)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationSession) IncreaseStake(_channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseStake(&_HermesImplementation.TransactOpts, _channelId, _amount)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) IncreaseStake(_channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseStake(&_HermesImplementation.TransactOpts, _channelId, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x699a0885.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake, address _dexAddress) returns()
func (_HermesImplementation *HermesImplementationTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int, _dexAddress common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "initialize", _token, _operator, _fee, _minStake, _maxStake, _dexAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x699a0885.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake, address _dexAddress) returns()
func (_HermesImplementation *HermesImplementationSession) Initialize(_token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int, _dexAddress common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Initialize(&_HermesImplementation.TransactOpts, _token, _operator, _fee, _minStake, _maxStake, _dexAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x699a0885.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake, address _dexAddress) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) Initialize(_token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int, _dexAddress common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Initialize(&_HermesImplementation.TransactOpts, _token, _operator, _fee, _minStake, _maxStake, _dexAddress)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x24f453d1.
//
// Solidity: function openChannel(address _identity, uint256 _amountToStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) OpenChannel(opts *bind.TransactOpts, _identity common.Address, _amountToStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "openChannel", _identity, _amountToStake)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x24f453d1.
//
// Solidity: function openChannel(address _identity, uint256 _amountToStake) returns()
func (_HermesImplementation *HermesImplementationSession) OpenChannel(_identity common.Address, _amountToStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.OpenChannel(&_HermesImplementation.TransactOpts, _identity, _amountToStake)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x24f453d1.
//
// Solidity: function openChannel(address _identity, uint256 _amountToStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) OpenChannel(_identity common.Address, _amountToStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.OpenChannel(&_HermesImplementation.TransactOpts, _identity, _amountToStake)
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactor) PauseChannelOpening(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "pauseChannelOpening")
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationSession) PauseChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.PauseChannelOpening(&_HermesImplementation.TransactOpts)
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) PauseChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.PauseChannelOpening(&_HermesImplementation.TransactOpts)
}

// PayAndSettle is a paid mutator transaction binding the contract method 0x52a8e78d.
//
// Solidity: function payAndSettle(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature, address _beneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationTransactor) PayAndSettle(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte, _beneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "payAndSettle", _identity, _amount, _transactorFee, _preimage, _signature, _beneficiary, _beneficiarySignature)
}

// PayAndSettle is a paid mutator transaction binding the contract method 0x52a8e78d.
//
// Solidity: function payAndSettle(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature, address _beneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationSession) PayAndSettle(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte, _beneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.PayAndSettle(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature, _beneficiary, _beneficiarySignature)
}

// PayAndSettle is a paid mutator transaction binding the contract method 0x52a8e78d.
//
// Solidity: function payAndSettle(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature, address _beneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) PayAndSettle(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte, _beneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.PayAndSettle(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature, _beneficiary, _beneficiarySignature)
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationTransactor) ResolveEmergency(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "resolveEmergency")
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationSession) ResolveEmergency() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ResolveEmergency(&_HermesImplementation.TransactOpts)
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ResolveEmergency() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ResolveEmergency(&_HermesImplementation.TransactOpts)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetFundsDestination(opts *bind.TransactOpts, _newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setFundsDestination", _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetFundsDestination(&_HermesImplementation.TransactOpts, _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetFundsDestination(&_HermesImplementation.TransactOpts, _newDestination)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetHermesFee(opts *bind.TransactOpts, _newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setHermesFee", _newFee)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationSession) SetHermesFee(_newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetHermesFee(&_HermesImplementation.TransactOpts, _newFee)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetHermesFee(_newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetHermesFee(&_HermesImplementation.TransactOpts, _newFee)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetMaxStake(opts *bind.TransactOpts, _newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setMaxStake", _newMaxStake)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationSession) SetMaxStake(_newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMaxStake(&_HermesImplementation.TransactOpts, _newMaxStake)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetMaxStake(_newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMaxStake(&_HermesImplementation.TransactOpts, _newMaxStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetMinStake(opts *bind.TransactOpts, _newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setMinStake", _newMinStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationSession) SetMinStake(_newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMinStake(&_HermesImplementation.TransactOpts, _newMinStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetMinStake(_newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMinStake(&_HermesImplementation.TransactOpts, _newMinStake)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0x71d2ff1b.
//
// Solidity: function settleIntoStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleIntoStake(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleIntoStake", _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0x71d2ff1b.
//
// Solidity: function settleIntoStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleIntoStake(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleIntoStake(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0x71d2ff1b.
//
// Solidity: function settleIntoStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleIntoStake(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleIntoStake(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettlePromise(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settlePromise", _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettlePromise(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettlePromise(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettlePromise(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettlePromise(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x53d2a0ff.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _promiseSignature, address _newBeneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleWithBeneficiary(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleWithBeneficiary", _identity, _amount, _transactorFee, _preimage, _promiseSignature, _newBeneficiary, _beneficiarySignature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x53d2a0ff.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _promiseSignature, address _newBeneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleWithBeneficiary(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithBeneficiary(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _promiseSignature, _newBeneficiary, _beneficiarySignature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x53d2a0ff.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _promiseSignature, address _newBeneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleWithBeneficiary(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithBeneficiary(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _promiseSignature, _newBeneficiary, _beneficiarySignature)
}

// SettleWithDEX is a paid mutator transaction binding the contract method 0x02062d12.
//
// Solidity: function settleWithDEX(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleWithDEX(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleWithDEX", _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleWithDEX is a paid mutator transaction binding the contract method 0x02062d12.
//
// Solidity: function settleWithDEX(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleWithDEX(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithDEX(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleWithDEX is a paid mutator transaction binding the contract method 0x02062d12.
//
// Solidity: function settleWithDEX(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleWithDEX(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithDEX(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.TransferOwnership(&_HermesImplementation.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.TransferOwnership(&_HermesImplementation.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactor) Withdraw(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "withdraw", _beneficiary, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationSession) Withdraw(_beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Withdraw(&_HermesImplementation.TransactOpts, _beneficiary, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) Withdraw(_beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Withdraw(&_HermesImplementation.TransactOpts, _beneficiary, _amount)
}

// HermesImplementationChannelOpeningActivatedIterator is returned from FilterChannelOpeningActivated and is used to iterate over the raw logs and unpacked data for ChannelOpeningActivated events raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningActivatedIterator struct {
	Event *HermesImplementationChannelOpeningActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelOpeningActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelOpeningActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelOpeningActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelOpeningActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelOpeningActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelOpeningActivated represents a ChannelOpeningActivated event raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningActivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChannelOpeningActivated is a free log retrieval operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelOpeningActivated(opts *bind.FilterOpts) (*HermesImplementationChannelOpeningActivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelOpeningActivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelOpeningActivatedIterator{contract: _HermesImplementation.contract, event: "ChannelOpeningActivated", logs: logs, sub: sub}, nil
}

// WatchChannelOpeningActivated is a free log subscription operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelOpeningActivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelOpeningActivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelOpeningActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelOpeningActivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpeningActivated is a log parse operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelOpeningActivated(log types.Log) (*HermesImplementationChannelOpeningActivated, error) {
	event := new(HermesImplementationChannelOpeningActivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationChannelOpeningPausedIterator is returned from FilterChannelOpeningPaused and is used to iterate over the raw logs and unpacked data for ChannelOpeningPaused events raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningPausedIterator struct {
	Event *HermesImplementationChannelOpeningPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelOpeningPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelOpeningPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelOpeningPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelOpeningPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelOpeningPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelOpeningPaused represents a ChannelOpeningPaused event raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningPaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChannelOpeningPaused is a free log retrieval operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelOpeningPaused(opts *bind.FilterOpts) (*HermesImplementationChannelOpeningPausedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelOpeningPaused")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelOpeningPausedIterator{contract: _HermesImplementation.contract, event: "ChannelOpeningPaused", logs: logs, sub: sub}, nil
}

// WatchChannelOpeningPaused is a free log subscription operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelOpeningPaused(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelOpeningPaused) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelOpeningPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelOpeningPaused)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpeningPaused is a log parse operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelOpeningPaused(log types.Log) (*HermesImplementationChannelOpeningPaused, error) {
	event := new(HermesImplementationChannelOpeningPaused)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationDestinationChangedIterator is returned from FilterDestinationChanged and is used to iterate over the raw logs and unpacked data for DestinationChanged events raised by the HermesImplementation contract.
type HermesImplementationDestinationChangedIterator struct {
	Event *HermesImplementationDestinationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationDestinationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationDestinationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationDestinationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationDestinationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationDestinationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationDestinationChanged represents a DestinationChanged event raised by the HermesImplementation contract.
type HermesImplementationDestinationChanged struct {
	PreviousDestination common.Address
	NewDestination      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDestinationChanged is a free log retrieval operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) FilterDestinationChanged(opts *bind.FilterOpts, previousDestination []common.Address, newDestination []common.Address) (*HermesImplementationDestinationChangedIterator, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationDestinationChangedIterator{contract: _HermesImplementation.contract, event: "DestinationChanged", logs: logs, sub: sub}, nil
}

// WatchDestinationChanged is a free log subscription operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) WatchDestinationChanged(opts *bind.WatchOpts, sink chan<- *HermesImplementationDestinationChanged, previousDestination []common.Address, newDestination []common.Address) (event.Subscription, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationDestinationChanged)
				if err := _HermesImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDestinationChanged is a log parse operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) ParseDestinationChanged(log types.Log) (*HermesImplementationDestinationChanged, error) {
	event := new(HermesImplementationDestinationChanged)
	if err := _HermesImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationFundsWithdrawnedIterator is returned from FilterFundsWithdrawned and is used to iterate over the raw logs and unpacked data for FundsWithdrawned events raised by the HermesImplementation contract.
type HermesImplementationFundsWithdrawnedIterator struct {
	Event *HermesImplementationFundsWithdrawned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationFundsWithdrawnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationFundsWithdrawned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationFundsWithdrawned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationFundsWithdrawnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationFundsWithdrawnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationFundsWithdrawned represents a FundsWithdrawned event raised by the HermesImplementation contract.
type HermesImplementationFundsWithdrawned struct {
	Amount      *big.Int
	Beneficiary common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterFundsWithdrawned is a free log retrieval operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) FilterFundsWithdrawned(opts *bind.FilterOpts) (*HermesImplementationFundsWithdrawnedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "FundsWithdrawned")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationFundsWithdrawnedIterator{contract: _HermesImplementation.contract, event: "FundsWithdrawned", logs: logs, sub: sub}, nil
}

// WatchFundsWithdrawned is a free log subscription operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) WatchFundsWithdrawned(opts *bind.WatchOpts, sink chan<- *HermesImplementationFundsWithdrawned) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "FundsWithdrawned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationFundsWithdrawned)
				if err := _HermesImplementation.contract.UnpackLog(event, "FundsWithdrawned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsWithdrawned is a log parse operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) ParseFundsWithdrawned(log types.Log) (*HermesImplementationFundsWithdrawned, error) {
	event := new(HermesImplementationFundsWithdrawned)
	if err := _HermesImplementation.contract.UnpackLog(event, "FundsWithdrawned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesClosedIterator is returned from FilterHermesClosed and is used to iterate over the raw logs and unpacked data for HermesClosed events raised by the HermesImplementation contract.
type HermesImplementationHermesClosedIterator struct {
	Event *HermesImplementationHermesClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesClosed represents a HermesClosed event raised by the HermesImplementation contract.
type HermesImplementationHermesClosed struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterHermesClosed is a free log retrieval operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockNumber)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesClosed(opts *bind.FilterOpts) (*HermesImplementationHermesClosedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesClosed")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesClosedIterator{contract: _HermesImplementation.contract, event: "HermesClosed", logs: logs, sub: sub}, nil
}

// WatchHermesClosed is a free log subscription operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockNumber)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesClosed(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesClosed) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesClosed)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesClosed is a log parse operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockNumber)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesClosed(log types.Log) (*HermesImplementationHermesClosed, error) {
	event := new(HermesImplementationHermesClosed)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesClosed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesFeeUpdatedIterator is returned from FilterHermesFeeUpdated and is used to iterate over the raw logs and unpacked data for HermesFeeUpdated events raised by the HermesImplementation contract.
type HermesImplementationHermesFeeUpdatedIterator struct {
	Event *HermesImplementationHermesFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesFeeUpdated represents a HermesFeeUpdated event raised by the HermesImplementation contract.
type HermesImplementationHermesFeeUpdated struct {
	NewFee         uint16
	ValidFromBlock uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterHermesFeeUpdated is a free log retrieval operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesFeeUpdated(opts *bind.FilterOpts) (*HermesImplementationHermesFeeUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesFeeUpdatedIterator{contract: _HermesImplementation.contract, event: "HermesFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchHermesFeeUpdated is a free log subscription operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesFeeUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesFeeUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesFeeUpdated is a log parse operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesFeeUpdated(log types.Log) (*HermesImplementationHermesFeeUpdated, error) {
	event := new(HermesImplementationHermesFeeUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesPunishmentActivatedIterator is returned from FilterHermesPunishmentActivated and is used to iterate over the raw logs and unpacked data for HermesPunishmentActivated events raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentActivatedIterator struct {
	Event *HermesImplementationHermesPunishmentActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesPunishmentActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesPunishmentActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesPunishmentActivated represents a HermesPunishmentActivated event raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentActivated struct {
	ActivationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterHermesPunishmentActivated is a free log retrieval operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlock)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesPunishmentActivated(opts *bind.FilterOpts) (*HermesImplementationHermesPunishmentActivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesPunishmentActivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesPunishmentActivatedIterator{contract: _HermesImplementation.contract, event: "HermesPunishmentActivated", logs: logs, sub: sub}, nil
}

// WatchHermesPunishmentActivated is a free log subscription operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlock)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesPunishmentActivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesPunishmentActivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesPunishmentActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesPunishmentActivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesPunishmentActivated is a log parse operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlock)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesPunishmentActivated(log types.Log) (*HermesImplementationHermesPunishmentActivated, error) {
	event := new(HermesImplementationHermesPunishmentActivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesPunishmentDeactivatedIterator is returned from FilterHermesPunishmentDeactivated and is used to iterate over the raw logs and unpacked data for HermesPunishmentDeactivated events raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentDeactivatedIterator struct {
	Event *HermesImplementationHermesPunishmentDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesPunishmentDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesPunishmentDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesPunishmentDeactivated represents a HermesPunishmentDeactivated event raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentDeactivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterHermesPunishmentDeactivated is a free log retrieval operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesPunishmentDeactivated(opts *bind.FilterOpts) (*HermesImplementationHermesPunishmentDeactivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesPunishmentDeactivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesPunishmentDeactivatedIterator{contract: _HermesImplementation.contract, event: "HermesPunishmentDeactivated", logs: logs, sub: sub}, nil
}

// WatchHermesPunishmentDeactivated is a free log subscription operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesPunishmentDeactivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesPunishmentDeactivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesPunishmentDeactivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesPunishmentDeactivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesPunishmentDeactivated is a log parse operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesPunishmentDeactivated(log types.Log) (*HermesImplementationHermesPunishmentDeactivated, error) {
	event := new(HermesImplementationHermesPunishmentDeactivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesStakeIncreasedIterator is returned from FilterHermesStakeIncreased and is used to iterate over the raw logs and unpacked data for HermesStakeIncreased events raised by the HermesImplementation contract.
type HermesImplementationHermesStakeIncreasedIterator struct {
	Event *HermesImplementationHermesStakeIncreased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesStakeIncreasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesStakeIncreased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesStakeIncreased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesStakeIncreasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesStakeIncreasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesStakeIncreased represents a HermesStakeIncreased event raised by the HermesImplementation contract.
type HermesImplementationHermesStakeIncreased struct {
	NewStake *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterHermesStakeIncreased is a free log retrieval operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesStakeIncreased(opts *bind.FilterOpts) (*HermesImplementationHermesStakeIncreasedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesStakeIncreased")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesStakeIncreasedIterator{contract: _HermesImplementation.contract, event: "HermesStakeIncreased", logs: logs, sub: sub}, nil
}

// WatchHermesStakeIncreased is a free log subscription operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesStakeIncreased(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesStakeIncreased) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesStakeIncreased")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesStakeIncreased)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesStakeIncreased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesStakeIncreased is a log parse operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesStakeIncreased(log types.Log) (*HermesImplementationHermesStakeIncreased, error) {
	event := new(HermesImplementationHermesStakeIncreased)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesStakeIncreased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationMaxStakeValueUpdatedIterator is returned from FilterMaxStakeValueUpdated and is used to iterate over the raw logs and unpacked data for MaxStakeValueUpdated events raised by the HermesImplementation contract.
type HermesImplementationMaxStakeValueUpdatedIterator struct {
	Event *HermesImplementationMaxStakeValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationMaxStakeValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationMaxStakeValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationMaxStakeValueUpdated represents a MaxStakeValueUpdated event raised by the HermesImplementation contract.
type HermesImplementationMaxStakeValueUpdated struct {
	NewMaxStake *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMaxStakeValueUpdated is a free log retrieval operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterMaxStakeValueUpdated(opts *bind.FilterOpts) (*HermesImplementationMaxStakeValueUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "MaxStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationMaxStakeValueUpdatedIterator{contract: _HermesImplementation.contract, event: "MaxStakeValueUpdated", logs: logs, sub: sub}, nil
}

// WatchMaxStakeValueUpdated is a free log subscription operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchMaxStakeValueUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationMaxStakeValueUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "MaxStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationMaxStakeValueUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "MaxStakeValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaxStakeValueUpdated is a log parse operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseMaxStakeValueUpdated(log types.Log) (*HermesImplementationMaxStakeValueUpdated, error) {
	event := new(HermesImplementationMaxStakeValueUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "MaxStakeValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationMinStakeValueUpdatedIterator is returned from FilterMinStakeValueUpdated and is used to iterate over the raw logs and unpacked data for MinStakeValueUpdated events raised by the HermesImplementation contract.
type HermesImplementationMinStakeValueUpdatedIterator struct {
	Event *HermesImplementationMinStakeValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationMinStakeValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationMinStakeValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationMinStakeValueUpdated represents a MinStakeValueUpdated event raised by the HermesImplementation contract.
type HermesImplementationMinStakeValueUpdated struct {
	NewMinStake *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMinStakeValueUpdated is a free log retrieval operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterMinStakeValueUpdated(opts *bind.FilterOpts) (*HermesImplementationMinStakeValueUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "MinStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationMinStakeValueUpdatedIterator{contract: _HermesImplementation.contract, event: "MinStakeValueUpdated", logs: logs, sub: sub}, nil
}

// WatchMinStakeValueUpdated is a free log subscription operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchMinStakeValueUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationMinStakeValueUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "MinStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationMinStakeValueUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "MinStakeValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinStakeValueUpdated is a log parse operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseMinStakeValueUpdated(log types.Log) (*HermesImplementationMinStakeValueUpdated, error) {
	event := new(HermesImplementationMinStakeValueUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "MinStakeValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationNewStakeIterator is returned from FilterNewStake and is used to iterate over the raw logs and unpacked data for NewStake events raised by the HermesImplementation contract.
type HermesImplementationNewStakeIterator struct {
	Event *HermesImplementationNewStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationNewStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationNewStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationNewStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationNewStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationNewStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationNewStake represents a NewStake event raised by the HermesImplementation contract.
type HermesImplementationNewStake struct {
	ChannelId   [32]byte
	StakeAmount *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewStake is a free log retrieval operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) FilterNewStake(opts *bind.FilterOpts, channelId [][32]byte) (*HermesImplementationNewStakeIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "NewStake", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationNewStakeIterator{contract: _HermesImplementation.contract, event: "NewStake", logs: logs, sub: sub}, nil
}

// WatchNewStake is a free log subscription operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) WatchNewStake(opts *bind.WatchOpts, sink chan<- *HermesImplementationNewStake, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "NewStake", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationNewStake)
				if err := _HermesImplementation.contract.UnpackLog(event, "NewStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewStake is a log parse operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) ParseNewStake(log types.Log) (*HermesImplementationNewStake, error) {
	event := new(HermesImplementationNewStake)
	if err := _HermesImplementation.contract.UnpackLog(event, "NewStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the HermesImplementation contract.
type HermesImplementationOwnershipTransferredIterator struct {
	Event *HermesImplementationOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationOwnershipTransferred represents a OwnershipTransferred event raised by the HermesImplementation contract.
type HermesImplementationOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*HermesImplementationOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationOwnershipTransferredIterator{contract: _HermesImplementation.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *HermesImplementationOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationOwnershipTransferred)
				if err := _HermesImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) ParseOwnershipTransferred(log types.Log) (*HermesImplementationOwnershipTransferred, error) {
	event := new(HermesImplementationOwnershipTransferred)
	if err := _HermesImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationPromiseSettledIterator is returned from FilterPromiseSettled and is used to iterate over the raw logs and unpacked data for PromiseSettled events raised by the HermesImplementation contract.
type HermesImplementationPromiseSettledIterator struct {
	Event *HermesImplementationPromiseSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationPromiseSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationPromiseSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationPromiseSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationPromiseSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationPromiseSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationPromiseSettled represents a PromiseSettled event raised by the HermesImplementation contract.
type HermesImplementationPromiseSettled struct {
	ChannelId               [32]byte
	Beneficiary             common.Address
	AmountSentToBeneficiary *big.Int
	Fees                    *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterPromiseSettled is a free log retrieval operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address indexed beneficiary, uint256 amountSentToBeneficiary, uint256 fees)
func (_HermesImplementation *HermesImplementationFilterer) FilterPromiseSettled(opts *bind.FilterOpts, channelId [][32]byte, beneficiary []common.Address) (*HermesImplementationPromiseSettledIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}
	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "PromiseSettled", channelIdRule, beneficiaryRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationPromiseSettledIterator{contract: _HermesImplementation.contract, event: "PromiseSettled", logs: logs, sub: sub}, nil
}

// WatchPromiseSettled is a free log subscription operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address indexed beneficiary, uint256 amountSentToBeneficiary, uint256 fees)
func (_HermesImplementation *HermesImplementationFilterer) WatchPromiseSettled(opts *bind.WatchOpts, sink chan<- *HermesImplementationPromiseSettled, channelId [][32]byte, beneficiary []common.Address) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}
	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "PromiseSettled", channelIdRule, beneficiaryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationPromiseSettled)
				if err := _HermesImplementation.contract.UnpackLog(event, "PromiseSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromiseSettled is a log parse operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address indexed beneficiary, uint256 amountSentToBeneficiary, uint256 fees)
func (_HermesImplementation *HermesImplementationFilterer) ParsePromiseSettled(log types.Log) (*HermesImplementationPromiseSettled, error) {
	event := new(HermesImplementationPromiseSettled)
	if err := _HermesImplementation.contract.UnpackLog(event, "PromiseSettled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

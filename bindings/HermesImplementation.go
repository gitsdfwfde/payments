/* Mysterium network payment library.
 *
 * Copyright (C) 2021 BlockDev AG
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HermesImplementationMetaData contains all meta data concerning the HermesImplementation contract.
var HermesImplementationMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[],\"name\":\"ChannelOpeningActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChannelOpeningPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"FundsWithdrawned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"HermesClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"name\":\"HermesFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationBlockTime\",\"type\":\"uint256\"}],\"name\":\"HermesPunishmentActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HermesPunishmentDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"HermesStakeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxStake\",\"type\":\"uint256\"}],\"name\":\"MaxStakeValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"MinStakeValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSentToBeneficiary\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lock\",\"type\":\"bytes32\"}],\"name\":\"PromiseSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUsedNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punishment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activationBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"getChannelId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getChannelId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHermesStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumHermesImplementation.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_dexAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToStake\",\"type\":\"uint256\"}],\"name\":\"openChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settlePromise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_beneficiarySignature\",\"type\":\"bytes\"}],\"name\":\"payAndSettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_promiseSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_beneficiarySignature\",\"type\":\"bytes\"}],\"name\":\"settleWithBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleWithDEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleIntoStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"decreaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolveEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxStake\",\"type\":\"uint256\"}],\"name\":\"setMaxStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setHermesFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionalStake\",\"type\":\"uint256\"}],\"name\":\"increaseHermesStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"}],\"name\":\"isChannelOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHermesActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseChannelOpening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateChannelOpening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeHermes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getStakeBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateHermesFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalExpectedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_preimage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"validatePromise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5060018055613dbc806100246000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80637295973a1161015c578063bc96a1e9116100ce578063eb295b2711610087578063eb295b27146105c0578063f2fde38b146105d3578063f3fef3a3146105e6578063f58c5b6e146105f9578063fbb46b981461060a578063fc0c546a1461061257600080fd5b8063bc96a1e91461055a578063df8de3e714610562578063e1791b2d14610575578063e1c6648714610588578063e58473f2146105a7578063e7f43c68146105af57600080fd5b806394c7915d1161012057806394c7915d146104e35780639801134e146104eb5780639ed9903e1461052c578063aa606dee14610537578063ab2f0e511461053f578063ae10ed841461054757600080fd5b80637295973a1461044f5780637a7ebd7b146104625780638c80fd90146104b75780638d886fac146104ca5780638da5cb5b146104d257600080fd5b80634e69d560116101f55780636931b550116101b95780636931b550146103e8578063699a0885146103f05780636e9094ea146104035780636fc148371461041657806370603a7f1461042957806371d2ff1b1461043c57600080fd5b80634e69d5601461037057806352a8e78d1461038a57806353d2a0ff1461039d5780635ab1bd53146103b05780636138dda7146103d557600080fd5b806324f453d11161024757806324f453d1146102fd578063306db49b1461031057806338df102414610318578063392e53cd1461032b57806339f976261461034a57806348d9f01e1461035d57600080fd5b806302062d12146102845780630684cd201461029957806315c73afd146102c15780631f4f12c6146102c9578063238e130a146102ea575b600080fd5b61029761029236600461356a565b610625565b005b600f546010546102a7919082565b604080519283526020830191909152015b60405180910390f35b610297610886565b6102dc6102d73660046135d6565b610b13565b6040519081526020016102b8565b6102976102f83660046135ef565b610b48565b61029761030b36600461360c565b610bf5565b6009546102dc565b61029761032636600461364f565b610cb4565b6005546001600160a01b031615155b60405190151581526020016102b8565b61029761035836600461366a565b610e9c565b61029761036b36600461356a565b610f16565b600b54600160a01b900460ff166040516102b891906136a2565b6102976103983660046136ca565b611071565b6102976103ab3660046136ca565b611221565b6004546001600160a01b03165b6040516001600160a01b0390911681526020016102b8565b6102976103e33660046135ef565b611337565b610297611560565b6102976103fe366004613771565b61160d565b61033a6104113660046135d6565b611971565b6102976104243660046135d6565b6119a0565b61033a6104373660046137df565b611ad2565b61029761044a36600461356a565b611b58565b61029761045d366004613829565b611b8f565b6104976104703660046135d6565b600e6020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016102b8565b6102976104c53660046135d6565b611fbc565b6102dc6120e8565b6000546001600160a01b03166103bd565b6102dc612143565b600c5461050a9061ffff8116906201000090046001600160401b031682565b6040805161ffff90931683526001600160401b039091166020830152016102b8565b6007546008546102a7565b610297612168565b6102dc61220d565b6102976105553660046135d6565b6122bd565b61033a6123ef565b6102976105703660046135ef565b612442565b6102dc61058336600461388b565b612625565b600d5461050a9061ffff8116906201000090046001600160401b031682565b61029761265a565b6005546001600160a01b03166103bd565b6102dc6105ce3660046135ef565b61273f565b6102976105e13660046135ef565b612788565b6102976105f436600461360c565b612886565b6002546001600160a01b03166103bd565b610297612a4f565b6003546103bd906001600160a01b031681565b6004805460405163505a1b3160e01b81526001600160a01b03888116938201939093526000929091169063505a1b319060240160206040518083038186803b15801561067057600080fd5b505afa158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a891906138ee565b90506001600160a01b0381166106d95760405162461bcd60e51b81526004016106d09061390b565b60405180910390fd5b60006106e48761273f565b905060006106f98289858a8a8a8a6001612b29565b6040805160028082526060820183529293506000928392602083019080368337505060035482519293506001600160a01b03169183915060009061073f5761073f613973565b6001600160a01b03928316602091820292909201810191909152600b54604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b15801561079357600080fd5b505afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb91906138ee565b816001815181106107de576107de613973565b6001600160a01b039283166020918202929092010152600b546040516318cbafe560e01b81529116906318cbafe590610823908690869086908b904290600401613989565b600060405180830381600087803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087991908101906139fa565b5050505050505050505050565b6002600b54600160a01b900460ff1660038111156108a6576108a661368c565b146109025760405162461bcd60e51b815260206004820152602660248201527f4865726d65733a2073686f756c6420626520696e2070756e6973686d656e742060448201526573746174757360d01b60648201526084016106d0565b60006064610923600461ffff1660065461091c9190613ab5565b6064612e65565b61092d9190613ad4565b600f54909150610e10906000906109449042613af6565b905060006001836109558486612e65565b61095f9190613ad4565b6109699190613af6565b905060006109778583613ab5565b601054909150610988908290613b0d565b601055600854600090610999612143565b6109a39190613b0d565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156109ec57600080fd5b505afa158015610a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a249190613b25565b905081811015610ad4576003546001600160a01b03166323b872dd3330610a4b8587613af6565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015610a9a57600080fd5b505af1158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad29190613b3e565b505b600b805460ff60a01b191690556040517f5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c90600090a150505050505050565b60006064610b386064610b246120e8565b610b2e9086613ab5565b61091c9190613ad4565b610b429190613ad4565b92915050565b6000546001600160a01b0316331480610b6a57506000546001600160a01b0316155b610b865760405162461bcd60e51b81526004016106d090613b60565b6001600160a01b038116610b9957600080fd5b6002546040516001600160a01b038084169216907fe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610c5f5760405162461bcd60e51b815260206004820152602760248201527f4865726d65733a206f6e6c792072656769737472792063616e206f70656e206360448201526668616e6e656c7360c81b60648201526084016106d0565b6000600b54600160a01b900460ff166003811115610c7f57610c7f61368c565b14610c9c5760405162461bcd60e51b81526004016106d090613b95565b610cb0610ca88361273f565b826000612e9a565b5050565b6000546001600160a01b0316331480610cd657506000546001600160a01b0316155b610cf25760405162461bcd60e51b81526004016106d090613b60565b6003600b54600160a01b900460ff166003811115610d1257610d1261368c565b1415610d605760405162461bcd60e51b815260206004820152601c60248201527f4865726d65733a2073686f756c64206265206e6f7420636c6f7365640000000060448201526064016106d0565b6113888161ffff161115610d865760405162461bcd60e51b81526004016106d090613bd7565b600c546201000090046001600160401b0316421015610df15760405162461bcd60e51b815260206004820152602160248201527f4865726d65733a2063616e27742075706461746520696e6163746976652066656044820152606560f81b60648201526084016106d0565b6000610dfb6130dc565b600c8054600d80546001600160401b03620100008085048216810269ffffffffffffffffffff1993841661ffff8088169190911791909117909455604080518082018252948a168086529288166020958601819052918202939095168217929092179094558251938452908301529192507fea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b91015b60405180910390a15050565b6003600b54600160a01b900460ff166003811115610ebc57610ebc61368c565b1415610f0a5760405162461bcd60e51b815260206004820152601b60248201527f6865726d65732073686f756c64206265206e6f7420636c6f736564000000000060448201526064016106d0565b610cb082826000612e9a565b6004805460405163505a1b3160e01b81526001600160a01b03888116938201939093526000929091169063505a1b319060240160206040518083038186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9991906138ee565b90506001600160a01b038116610fc15760405162461bcd60e51b81526004016106d09061390b565b6000610fcc8761273f565b90506000610fe18289858a8a8a8a6001612b29565b60035460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906110149086908590600401613c1b565b602060405180830381600087803b15801561102e57600080fd5b505af1158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110669190613b3e565b505050505050505050565b600061109f886040518060400160405280600a8152602001691dda5d1a191c985dd85b60b21b815250612625565b905060006111078346604080516020810192909252810185905260608082018c9052608082018a905287901b6bffffffffffffffffffffffff191660a082015260b4015b604051602081830303815290604052805190602001206130eb90919063ffffffff16565b9050886001600160a01b0316816001600160a01b0316146111895760405162461bcd60e51b815260206004820152603660248201527f4865726d65733a20706179416e64536574746c6520726571756573742073686f6044820152751d5b19081899481c1c9bdc195c9b1e481cda59db995960521b60648201526084016106d0565b600061119c838b878c8c8c8c6000612b29565b60035460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906111cf9088908590600401613c1b565b602060405180830381600087803b1580156111e957600080fd5b505af11580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190613b3e565b6004805460405163d0171d7960e01b81526001600160a01b039091169163d0171d7991611254918b918791879101613c64565b600060405180830381600087803b15801561126e57600080fd5b505af1158015611282573d6000803e3d6000fd5b5050505060006112918861273f565b905060006112a6828a868b8b8b8b6001612b29565b60035460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906112d99087908590600401613c1b565b602060405180830381600087803b1580156112f357600080fd5b505af1158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b9190613b3e565b50505050505050505050565b6000546001600160a01b031633148061135957506000546001600160a01b0316155b6113755760405162461bcd60e51b81526004016106d090613b60565b6003600b54600160a01b900460ff1660038111156113955761139561368c565b146113e25760405162461bcd60e51b815260206004820152601960248201527f4865726d65733a206861766520746f20626520636c6f7365640000000000000060448201526064016106d0565b600a54421161144c5760405162461bcd60e51b815260206004820152603060248201527f4865726d65733a2074696d656c6f636b20706572696f642073686f756c64206260448201526f1948185b1c9958591e481c185cdcd95960821b60648201526084016106d0565b6010546003546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a082319060240160206040518083038186803b15801561149457600080fd5b505afa1580156114a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cc9190613b25565b6114d69190613af6565b60035460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906115099085908590600401613c1b565b602060405180830381600087803b15801561152357600080fd5b505af1158015611537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155b9190613b3e565b505050565b600260015414156115b35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106d0565b60026001819055546001600160a01b03166115cd57600080fd5b6002546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611606573d6000803e3d6000fd5b5060018055565b6005546001600160a01b0316156116715760405162461bcd60e51b815260206004820152602260248201527f4865726d65733a206861766520746f206265206e6f7420696e697469616c697a604482015261195960f21b60648201526084016106d0565b6001600160a01b0386166116e05760405162461bcd60e51b815260206004820152603060248201527f4865726d65733a20746f6b656e2063616e2774206265206465706c6f7964206960448201526f6e746f207a65726f206164647265737360801b60648201526084016106d0565b6001600160a01b0385166117365760405162461bcd60e51b815260206004820152601f60248201527f4865726d65733a206f70657261746f72206861766520746f206265207365740060448201526064016106d0565b6113888461ffff16111561175c5760405162461bcd60e51b81526004016106d090613bd7565b8282116117c45760405162461bcd60e51b815260206004820152603060248201527f4865726d65733a206d61785374616b65206861766520746f206265206269676760448201526f6572207468616e206d696e5374616b6560801b60648201526084016106d0565b60048054336001600160a01b03199182161782556003805482166001600160a01b038a8116918217909255600580549093169189169190911790915560408051808201825261ffff8816808252426001600160401b03166020909201829052600c805469ffffffffffffffffffff19169091176201000090920291909117905560078690556008859055516370a0823160e01b81523092810192909252906370a082319060240160206040518083038186803b15801561188357600080fd5b505afa158015611897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bb9190613b25565b60095560035460405163095ea7b360e01b81526001600160a01b039091169063095ea7b3906118f290849060001990600401613c1b565b602060405180830381600087803b15801561190c57600080fd5b505af1158015611920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119449190613b3e565b50600b80546001600160a01b0319166001600160a01b03831617905561196985612788565b505050505050565b6000818152600e6020526040812054151580610b425750506000908152600e6020526040902060010154151590565b6000546001600160a01b03163314806119c257506000546001600160a01b0316155b6119de5760405162461bcd60e51b81526004016106d090613b60565b6119e66123ef565b611a2d5760405162461bcd60e51b81526020600482015260186024820152774865726d65733a2068617320746f2062652061637469766560401b60448201526064016106d0565b6007548111611a965760405162461bcd60e51b815260206004820152602f60248201527f4865726d65733a206d61785374616b652068617320746f20626520626967676560448201526e72207468616e206d696e5374616b6560881b60648201526084016106d0565b60088190556040518181527f53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d906020015b60405180910390a150565b60008083604051602001611ae891815260200190565b6040516020818303038152906040528051906020012090506000611b3b84611b0d4690565b60408051602081019290925281018b9052606081018a90526080810189905260a0810185905260c0016110e3565b6005546001600160a01b0390811691161498975050505050505050565b6000611b638661273f565b90506000611b78828830898989896001612b29565b9050611b8682826001612e9a565b50505050505050565b6000611b9a8561273f565b9050611ba581611971565b611bf15760405162461bcd60e51b815260206004820181905260248201527f4865726d65733a206368616e6e656c2068617320746f206265206f70656e656460448201526064016106d0565b82841015611c5d5760405162461bcd60e51b815260206004820152603360248201527f4865726d65733a20616d6f756e742073686f756c6420626520626967676572206044820152727468616e207472616e736163746f722066656560681b60648201526084016106d0565b6000818152600e602052604090206001810154851115611cda5760405162461bcd60e51b815260206004820152603260248201527f4865726d65733a2063616e2774207769746864726177206d6f7265207468616e604482015271207468652063757272656e74207374616b6560701b60648201526084016106d0565b6002810154611cea906001613b0d565b600282015560408051808201909152601481527314dd185ad9481c995d1d5c9b881c995c5d595cdd60621b6020820152600090611d409085904660028601546040516110e393929189918d918d91602001613cb1565b905082611d4c8261273f565b14611dac5760405162461bcd60e51b815260206004820152602a60248201527f4865726d65733a206861766520746f206265207369676e6564206279206368616044820152696e6e656c20706172747960b01b60648201526084016106d0565b6000868360010154611dbe9190613af6565b60018401819055600654909150611dd6908890613af6565b6006558515611e655760035460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611e119033908a90600401613c1b565b602060405180830381600087803b158015611e2b57600080fd5b505af1158015611e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e639190613b3e565b505b6004805460405163505a1b3160e01b81526001600160a01b038b8116938201939093526000929091169063505a1b319060240160206040518083038186803b158015611eb057600080fd5b505afa158015611ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee891906138ee565b6003549091506001600160a01b031663a9059cbb82611f078a8c613af6565b6040518363ffffffff1660e01b8152600401611f24929190613c1b565b602060405180830381600087803b158015611f3e57600080fd5b505af1158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f769190613b3e565b50847fc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb83604051611fa991815260200190565b60405180910390a2505050505050505050565b6000546001600160a01b0316331480611fde57506000546001600160a01b0316155b611ffa5760405162461bcd60e51b81526004016106d090613b60565b6120026123ef565b6120495760405162461bcd60e51b81526020600482015260186024820152774865726d65733a2068617320746f2062652061637469766560401b60448201526064016106d0565b60085481106120b35760405162461bcd60e51b815260206004820152603060248201527f4865726d65733a206d696e5374616b652068617320746f20626520736d616c6c60448201526f6572207468616e206d61785374616b6560801b60648201526084016106d0565b60078190556040518181527fb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb03125190602001611ac7565b600c5460009081906201000090046001600160401b031642101561210d57600d612110565b600c5b60408051808201909152905461ffff8116808352620100009091046001600160401b031660209092019190915292915050565b6000600654612159600954600f6001015461310f565b6121639190613b0d565b905090565b6005546001600160a01b031633146121925760405162461bcd60e51b81526004016106d090613ced565b6000600b54600160a01b900460ff1660038111156121b2576121b261368c565b146121cf5760405162461bcd60e51b81526004016106d090613b95565b600b805460ff60a01b1916600160a01b1790556040517f1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e90600090a1565b600080612218612143565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561226157600080fd5b505afa158015612275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122999190613b25565b9050808211156122ac5760009250505090565b6122b68282613af6565b9250505090565b6000546001600160a01b03163314806122df57506000546001600160a01b0316155b6122fb5760405162461bcd60e51b81526004016106d090613b60565b8061230461220d565b10156123ac57600061231461220d565b61231e9083613af6565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561237157600080fd5b505af1158015612385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a99190613b3e565b50505b806009546123ba9190613b0d565b60098190556040519081527feb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed9190602001611ac7565b600080612406600b5460ff600160a01b9091041690565b9050600281600381111561241c5761241c61368c565b1415801561243c575060038160038111156124395761243961368c565b14155b91505090565b600260015414156124955760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106d0565b60026001819055546001600160a01b03166124af57600080fd5b6003546001600160a01b038281169116141561251b5760405162461bcd60e51b815260206004820152602560248201527f6e617469766520746f6b656e2066756e64732063616e2774206265207265636f6044820152641d995c995960da1b60648201526084016106d0565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561255d57600080fd5b505afa158015612571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125959190613b25565b60025460405163a9059cbb60e01b81529192506001600160a01b038085169263a9059cbb926125ca9216908590600401613c1b565b602060405180830381600087803b1580156125e457600080fd5b505af11580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190613b3e565b50506001805550565b600082308360405160200161263c93929190613d40565b60405160208183030381529060405280519060200120905092915050565b6000546001600160a01b031633148061267c57506000546001600160a01b0316155b6126985760405162461bcd60e51b81526004016106d090613b60565b6126a06123ef565b6126ec5760405162461bcd60e51b815260206004820152601860248201527f4865726d65733a2073686f756c6420626520616374697665000000000000000060448201526064016106d0565b600b805460ff60a01b1916600360a01b179055612707613125565b600a556040514281527ffa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e459060200160405180910390a1565b6040516bffffffffffffffffffffffff19606083811b8216602084015230901b166034820152600090604801604051602081830303815290604052805190602001209050919050565b6000546001600160a01b03163314806127aa57506000546001600160a01b0316155b6127c65760405162461bcd60e51b81526004016106d090613b60565b6001600160a01b03811661282b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314806128a857506000546001600160a01b0316155b6128c45760405162461bcd60e51b81526004016106d090613b60565b6128cc6123ef565b6129185760405162461bcd60e51b815260206004820152601960248201527f4865726d65733a206861766520746f206265206163746976650000000000000060448201526064016106d0565b8061292161220d565b101561298c5760405162461bcd60e51b815260206004820152603460248201527f4865726d65733a2073686f756c6420626520656e6f7567682066756e647320616044820152737661696c61626c6520746f20776974686472617760601b60648201526084016106d0565b60035460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906129be9085908590600401613c1b565b602060405180830381600087803b1580156129d857600080fd5b505af11580156129ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a109190613b3e565b50604080518281526001600160a01b03841660208201527fa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf9101610e90565b6005546001600160a01b03163314612a795760405162461bcd60e51b81526004016106d090613ced565b6001600b54600160a01b900460ff166003811115612a9957612a9961368c565b14612af15760405162461bcd60e51b815260206004820152602260248201527f4865726d65733a206861766520746f20626520696e2070617573656420737461604482015261746560f01b60648201526084016106d0565b600b805460ff60a01b191690556040517f2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df890600090a1565b6000612b336123ef565b612b915760405162461bcd60e51b815260206004820152602960248201527f4865726d65733a206865726d6573206861766520746f20626520696e2061637460448201526869766520737461746560b81b60648201526084016106d0565b612b9e8987878787611ad2565b612c055760405162461bcd60e51b815260206004820152603260248201527f4865726d65733a206861766520746f2062652070726f7065726c79207369676e6044820152716564207061796d656e742070726f6d69736560701b60648201526084016106d0565b6000898152600e6020526040812090612c1c61220d565b90508160010154811015612c7657600b805460ff60a01b1916600160a11b17905542600f81905560408051918252517f23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d96299181900360200190a15b8154600090612c85908a613af6565b9050878111612cf35760405162461bcd60e51b815260206004820152603460248201527f4865726d65733a20616d6f756e7420746f20736574746c652073686f756c6420604482015273636f766572207472616e736163746f722066656560601b60648201526084016106d0565b6000612d05600854856001015461310f565b905082821180612d1457508082115b15612d2657612d23838261313f565b91505b8354612d33908390613b0d565b8455600086612d43576000612d4c565b612d4c83610b13565b612d56908b613b0d565b90508915612de45760035460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612d909033908e90600401613c1b565b602060405180830381600087803b158015612daa57600080fd5b505af1158015612dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de29190613b3e565b505b6000612df08285613af6565b90508c6001600160a01b03168f8f6001600160a01b03167fbe62ac0eb86179a8bcebe2f194ee1a147982a61a2ee67ff7e70b3fad25ec16d784868f604051612e4b939291909283526020830191909152604082015260600190565b60405180910390a49e9d5050505050505050505050505050565b600081806001612e758287613b0d565b612e7f9190613af6565b612e899190613ad4565b612e939190613ab5565b9392505050565b60008211612ef65760405162461bcd60e51b815260206004820152602360248201527f4865726d65733a2073686f756c64207374616b65206d6f7265207468616e207a60448201526265726f60e81b60648201526084016106d0565b6000838152600e602052604081206001810154909190612f17908590613b0d565b9050600854811115612f9f5760405162461bcd60e51b8152602060048201526044602482018190527f4865726d65733a20746f74616c20616d6f756e7420746f207374616b65206361908201527f6e277420626520626967676572207468616e206d6178696d616c6c7920616c6c6064820152631bddd95960e21b608482015260a4016106d0565b82613088576003546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015612ff657600080fd5b505af115801561300a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302e9190613b3e565b6130885760405162461bcd60e51b815260206004820152602560248201527f4865726d65733a20746f6b656e207472616e736665722073686f756c6420737560448201526418d8d9595960da1b60648201526084016106d0565b6001820181905560065461309d908590613b0d565b60065560405181815285907fc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb9060200160405180910390a25050505050565b60006121636203f48042613b0d565b60008060006130fa858561314e565b91509150613107816131be565b509392505050565b600081831161311e5781612e93565b5090919050565b60006131356203f4806064613ab5565b6121639042613b0d565b600081831061311e5781612e93565b6000808251604114156131855760208301516040840151606085015160001a6131798782858561337c565b945094505050506131b7565b8251604014156131af57602083015160408401516131a4868383613469565b9350935050506131b7565b506000905060025b9250929050565b60008160048111156131d2576131d261368c565b14156131db5750565b60018160048111156131ef576131ef61368c565b141561323d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106d0565b60028160048111156132515761325161368c565b141561329f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106d0565b60038160048111156132b3576132b361368c565b141561330c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106d0565b60048160048111156133205761332061368c565b14156133795760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106d0565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156133b35750600090506003613460565b8460ff16601b141580156133cb57508460ff16601c14155b156133dc5750600090506004613460565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613430573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661345957600060019250925050613460565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161348a8782888561337c565b935093505050935093915050565b6001600160a01b038116811461337957600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156134eb576134eb6134ad565b604052919050565b60006001600160401b0383111561350c5761350c6134ad565b61351f601f8401601f19166020016134c3565b905082815283838301111561353357600080fd5b828260208301376000602084830101529392505050565b600082601f83011261355b57600080fd5b612e93838335602085016134f3565b600080600080600060a0868803121561358257600080fd5b853561358d81613498565b945060208601359350604086013592506060860135915060808601356001600160401b038111156135bd57600080fd5b6135c98882890161354a565b9150509295509295909350565b6000602082840312156135e857600080fd5b5035919050565b60006020828403121561360157600080fd5b8135612e9381613498565b6000806040838503121561361f57600080fd5b823561362a81613498565b946020939093013593505050565b803561ffff8116811461364a57600080fd5b919050565b60006020828403121561366157600080fd5b612e9382613638565b6000806040838503121561367d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60208101600483106136c457634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600080600060e0888a0312156136e557600080fd5b87356136f081613498565b965060208801359550604088013594506060880135935060808801356001600160401b038082111561372157600080fd5b61372d8b838c0161354a565b945060a08a0135915061373f82613498565b90925060c0890135908082111561375557600080fd5b506137628a828b0161354a565b91505092959891949750929550565b60008060008060008060c0878903121561378a57600080fd5b863561379581613498565b955060208701356137a581613498565b94506137b360408801613638565b9350606087013592506080870135915060a08701356137d181613498565b809150509295509295509295565b600080600080600060a086880312156137f757600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160401b038111156135bd57600080fd5b6000806000806080858703121561383f57600080fd5b843561384a81613498565b9350602085013592506040850135915060608501356001600160401b0381111561387357600080fd5b61387f8782880161354a565b91505092959194509250565b6000806040838503121561389e57600080fd5b82356138a981613498565b915060208301356001600160401b038111156138c457600080fd5b8301601f810185136138d557600080fd5b6138e4858235602084016134f3565b9150509250929050565b60006020828403121561390057600080fd5b8151612e9381613498565b60208082526042908201527f4865726d65733a206964656e74697479206861766520746f206265207265676960408201527f7374657265642c2062656e6566696369617279206861766520746f2062652073606082015261195d60f21b608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156139d95784516001600160a01b0316835293830193918301916001016139b4565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215613a0d57600080fd5b82516001600160401b0380821115613a2457600080fd5b818501915085601f830112613a3857600080fd5b815181811115613a4a57613a4a6134ad565b8060051b9150613a5b8483016134c3565b8181529183018401918481019088841115613a7557600080fd5b938501935b83851015613a9357845182529385019390850190613a7a565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613acf57613acf613a9f565b500290565b600082613af157634e487b7160e01b600052601260045260246000fd5b500490565b600082821015613b0857613b08613a9f565b500390565b60008219821115613b2057613b20613a9f565b500190565b600060208284031215613b3757600080fd5b5051919050565b600060208284031215613b5057600080fd5b81518015158114612e9357600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f4865726d65733a206861766520746f20626520696e2061637469766520737461604082015261746560f01b606082015260800190565b60208082526024908201527f4865726d65733a206665652063616e277420626520626967676572207468616e6040820152632035302560e01b606082015260800190565b6001600160a01b03929092168252602082015260400190565b60005b83811015613c4f578181015183820152602001613c37565b83811115613c5e576000848401525b50505050565b600060018060a01b038086168352808516602084015250606060408301528251806060840152613c9b816080850160208701613c34565b601f01601f191691909101608001949350505050565b60008751613cc3818460208c01613c34565b9190910195865250602085019390935260408401919091526060830152608082015260a001919050565b60208082526033908201527f4865726d65733a206f6e6c79206865726d6573206f70657261746f722063616e6040820152721031b0b636103a3434b990333ab731ba34b7b760691b606082015260800190565b60006bffffffffffffffffffffffff19808660601b168352808560601b166014840152508251613d77816028850160208701613c34565b9190910160280194935050505056fea2646970667358221220d2384075deaad11522890d4bd629b42fe9dd59a7aa98897c35e5e941417490f564736f6c63430008090033",
}

// HermesImplementationABI is the input ABI used to generate the binding from.
// Deprecated: Use HermesImplementationMetaData.ABI instead.
var HermesImplementationABI = HermesImplementationMetaData.ABI

// HermesImplementationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HermesImplementationMetaData.Bin instead.
var HermesImplementationBin = HermesImplementationMetaData.Bin

// DeployHermesImplementation deploys a new Ethereum contract, binding an instance of HermesImplementation to it.
func DeployHermesImplementation(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *HermesImplementation, error) {
	parsed, err := HermesImplementationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(HermesImplementationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &HermesImplementation{HermesImplementationCaller: HermesImplementationCaller{contract: contract}, HermesImplementationTransactor: HermesImplementationTransactor{contract: contract}, HermesImplementationFilterer: HermesImplementationFilterer{contract: contract}}, nil
}

// HermesImplementation is an auto generated Go binding around an Ethereum contract.
type HermesImplementation struct {
	HermesImplementationCaller     // Read-only binding to the contract
	HermesImplementationTransactor // Write-only binding to the contract
	HermesImplementationFilterer   // Log filterer for contract events
}

// HermesImplementationCaller is an auto generated read-only Go binding around an Ethereum contract.
type HermesImplementationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HermesImplementationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HermesImplementationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HermesImplementationSession struct {
	Contract     *HermesImplementation // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// HermesImplementationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HermesImplementationCallerSession struct {
	Contract *HermesImplementationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// HermesImplementationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HermesImplementationTransactorSession struct {
	Contract     *HermesImplementationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// HermesImplementationRaw is an auto generated low-level Go binding around an Ethereum contract.
type HermesImplementationRaw struct {
	Contract *HermesImplementation // Generic contract binding to access the raw methods on
}

// HermesImplementationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HermesImplementationCallerRaw struct {
	Contract *HermesImplementationCaller // Generic read-only contract binding to access the raw methods on
}

// HermesImplementationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HermesImplementationTransactorRaw struct {
	Contract *HermesImplementationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHermesImplementation creates a new instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementation(address common.Address, backend bind.ContractBackend) (*HermesImplementation, error) {
	contract, err := bindHermesImplementation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &HermesImplementation{HermesImplementationCaller: HermesImplementationCaller{contract: contract}, HermesImplementationTransactor: HermesImplementationTransactor{contract: contract}, HermesImplementationFilterer: HermesImplementationFilterer{contract: contract}}, nil
}

// NewHermesImplementationCaller creates a new read-only instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationCaller(address common.Address, caller bind.ContractCaller) (*HermesImplementationCaller, error) {
	contract, err := bindHermesImplementation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationCaller{contract: contract}, nil
}

// NewHermesImplementationTransactor creates a new write-only instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationTransactor(address common.Address, transactor bind.ContractTransactor) (*HermesImplementationTransactor, error) {
	contract, err := bindHermesImplementation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationTransactor{contract: contract}, nil
}

// NewHermesImplementationFilterer creates a new log filterer instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationFilterer(address common.Address, filterer bind.ContractFilterer) (*HermesImplementationFilterer, error) {
	contract, err := bindHermesImplementation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationFilterer{contract: contract}, nil
}

// bindHermesImplementation binds a generic wrapper to an already deployed contract.
func bindHermesImplementation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HermesImplementationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HermesImplementation *HermesImplementationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HermesImplementation.Contract.HermesImplementationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HermesImplementation *HermesImplementationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.Contract.HermesImplementationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HermesImplementation *HermesImplementationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HermesImplementation.Contract.HermesImplementationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HermesImplementation *HermesImplementationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HermesImplementation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HermesImplementation *HermesImplementationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HermesImplementation *HermesImplementationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HermesImplementation.Contract.contract.Transact(opts, method, params...)
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) AvailableBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "availableBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) AvailableBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.AvailableBalance(&_HermesImplementation.CallOpts)
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) AvailableBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.AvailableBalance(&_HermesImplementation.CallOpts)
}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) CalculateHermesFee(opts *bind.CallOpts, _amount *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "calculateHermesFee", _amount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) CalculateHermesFee(_amount *big.Int) (*big.Int, error) {
	return _HermesImplementation.Contract.CalculateHermesFee(&_HermesImplementation.CallOpts, _amount)
}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) CalculateHermesFee(_amount *big.Int) (*big.Int, error) {
	return _HermesImplementation.Contract.CalculateHermesFee(&_HermesImplementation.CallOpts, _amount)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(uint256 settled, uint256 stake, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationCaller) Channels(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Settled       *big.Int
	Stake         *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "channels", arg0)

	outstruct := new(struct {
		Settled       *big.Int
		Stake         *big.Int
		LastUsedNonce *big.Int
		Timelock      *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Settled = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Stake = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.LastUsedNonce = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Timelock = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(uint256 settled, uint256 stake, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationSession) Channels(arg0 [32]byte) (struct {
	Settled       *big.Int
	Stake         *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	return _HermesImplementation.Contract.Channels(&_HermesImplementation.CallOpts, arg0)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(uint256 settled, uint256 stake, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationCallerSession) Channels(arg0 [32]byte) (struct {
	Settled       *big.Int
	Stake         *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	return _HermesImplementation.Contract.Channels(&_HermesImplementation.CallOpts, arg0)
}

// GetActiveFee is a free data retrieval call binding the contract method 0x8d886fac.
//
// Solidity: function getActiveFee() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) GetActiveFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getActiveFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetActiveFee is a free data retrieval call binding the contract method 0x8d886fac.
//
// Solidity: function getActiveFee() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) GetActiveFee() (*big.Int, error) {
	return _HermesImplementation.Contract.GetActiveFee(&_HermesImplementation.CallOpts)
}

// GetActiveFee is a free data retrieval call binding the contract method 0x8d886fac.
//
// Solidity: function getActiveFee() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) GetActiveFee() (*big.Int, error) {
	return _HermesImplementation.Contract.GetActiveFee(&_HermesImplementation.CallOpts)
}

// GetChannelId is a free data retrieval call binding the contract method 0xe1791b2d.
//
// Solidity: function getChannelId(address _identity, string _type) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCaller) GetChannelId(opts *bind.CallOpts, _identity common.Address, _type string) ([32]byte, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getChannelId", _identity, _type)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetChannelId is a free data retrieval call binding the contract method 0xe1791b2d.
//
// Solidity: function getChannelId(address _identity, string _type) view returns(bytes32)
func (_HermesImplementation *HermesImplementationSession) GetChannelId(_identity common.Address, _type string) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId(&_HermesImplementation.CallOpts, _identity, _type)
}

// GetChannelId is a free data retrieval call binding the contract method 0xe1791b2d.
//
// Solidity: function getChannelId(address _identity, string _type) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCallerSession) GetChannelId(_identity common.Address, _type string) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId(&_HermesImplementation.CallOpts, _identity, _type)
}

// GetChannelId0 is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCaller) GetChannelId0(opts *bind.CallOpts, _identity common.Address) ([32]byte, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getChannelId0", _identity)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetChannelId0 is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationSession) GetChannelId0(_identity common.Address) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId0(&_HermesImplementation.CallOpts, _identity)
}

// GetChannelId0 is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCallerSession) GetChannelId0(_identity common.Address) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId0(&_HermesImplementation.CallOpts, _identity)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetFundsDestination(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getFundsDestination")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetFundsDestination() (common.Address, error) {
	return _HermesImplementation.Contract.GetFundsDestination(&_HermesImplementation.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetFundsDestination() (common.Address, error) {
	return _HermesImplementation.Contract.GetFundsDestination(&_HermesImplementation.CallOpts)
}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) GetHermesStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getHermesStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) GetHermesStake() (*big.Int, error) {
	return _HermesImplementation.Contract.GetHermesStake(&_HermesImplementation.CallOpts)
}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) GetHermesStake() (*big.Int, error) {
	return _HermesImplementation.Contract.GetHermesStake(&_HermesImplementation.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetOperator() (common.Address, error) {
	return _HermesImplementation.Contract.GetOperator(&_HermesImplementation.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetOperator() (common.Address, error) {
	return _HermesImplementation.Contract.GetOperator(&_HermesImplementation.CallOpts)
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetRegistry() (common.Address, error) {
	return _HermesImplementation.Contract.GetRegistry(&_HermesImplementation.CallOpts)
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetRegistry() (common.Address, error) {
	return _HermesImplementation.Contract.GetRegistry(&_HermesImplementation.CallOpts)
}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationCaller) GetStakeThresholds(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getStakeThresholds")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationSession) GetStakeThresholds() (*big.Int, *big.Int, error) {
	return _HermesImplementation.Contract.GetStakeThresholds(&_HermesImplementation.CallOpts)
}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationCallerSession) GetStakeThresholds() (*big.Int, *big.Int, error) {
	return _HermesImplementation.Contract.GetStakeThresholds(&_HermesImplementation.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationCaller) GetStatus(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "getStatus")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationSession) GetStatus() (uint8, error) {
	return _HermesImplementation.Contract.GetStatus(&_HermesImplementation.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationCallerSession) GetStatus() (uint8, error) {
	return _HermesImplementation.Contract.GetStatus(&_HermesImplementation.CallOpts)
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsChannelOpened(opts *bind.CallOpts, _channelId [32]byte) (bool, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "isChannelOpened", _channelId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsChannelOpened(_channelId [32]byte) (bool, error) {
	return _HermesImplementation.Contract.IsChannelOpened(&_HermesImplementation.CallOpts, _channelId)
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsChannelOpened(_channelId [32]byte) (bool, error) {
	return _HermesImplementation.Contract.IsChannelOpened(&_HermesImplementation.CallOpts, _channelId)
}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsHermesActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "isHermesActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsHermesActive() (bool, error) {
	return _HermesImplementation.Contract.IsHermesActive(&_HermesImplementation.CallOpts)
}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsHermesActive() (bool, error) {
	return _HermesImplementation.Contract.IsHermesActive(&_HermesImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsInitialized() (bool, error) {
	return _HermesImplementation.Contract.IsInitialized(&_HermesImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsInitialized() (bool, error) {
	return _HermesImplementation.Contract.IsInitialized(&_HermesImplementation.CallOpts)
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCaller) LastFee(opts *bind.CallOpts) (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "lastFee")

	outstruct := new(struct {
		Value     uint16
		ValidFrom uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(uint16)).(*uint16)
	outstruct.ValidFrom = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationSession) LastFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.LastFee(&_HermesImplementation.CallOpts)
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCallerSession) LastFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.LastFee(&_HermesImplementation.CallOpts)
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) MinimalExpectedBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "minimalExpectedBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) MinimalExpectedBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.MinimalExpectedBalance(&_HermesImplementation.CallOpts)
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) MinimalExpectedBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.MinimalExpectedBalance(&_HermesImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationSession) Owner() (common.Address, error) {
	return _HermesImplementation.Contract.Owner(&_HermesImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) Owner() (common.Address, error) {
	return _HermesImplementation.Contract.Owner(&_HermesImplementation.CallOpts)
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCaller) PreviousFee(opts *bind.CallOpts) (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "previousFee")

	outstruct := new(struct {
		Value     uint16
		ValidFrom uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(uint16)).(*uint16)
	outstruct.ValidFrom = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationSession) PreviousFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.PreviousFee(&_HermesImplementation.CallOpts)
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCallerSession) PreviousFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.PreviousFee(&_HermesImplementation.CallOpts)
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlockTime, uint256 amount)
func (_HermesImplementation *HermesImplementationCaller) Punishment(opts *bind.CallOpts) (struct {
	ActivationBlockTime *big.Int
	Amount              *big.Int
}, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "punishment")

	outstruct := new(struct {
		ActivationBlockTime *big.Int
		Amount              *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ActivationBlockTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlockTime, uint256 amount)
func (_HermesImplementation *HermesImplementationSession) Punishment() (struct {
	ActivationBlockTime *big.Int
	Amount              *big.Int
}, error) {
	return _HermesImplementation.Contract.Punishment(&_HermesImplementation.CallOpts)
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlockTime, uint256 amount)
func (_HermesImplementation *HermesImplementationCallerSession) Punishment() (struct {
	ActivationBlockTime *big.Int
	Amount              *big.Int
}, error) {
	return _HermesImplementation.Contract.Punishment(&_HermesImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationSession) Token() (common.Address, error) {
	return _HermesImplementation.Contract.Token(&_HermesImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) Token() (common.Address, error) {
	return _HermesImplementation.Contract.Token(&_HermesImplementation.CallOpts)
}

// ValidatePromise is a free data retrieval call binding the contract method 0x70603a7f.
//
// Solidity: function validatePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) ValidatePromise(opts *bind.CallOpts, _channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (bool, error) {
	var out []interface{}
	err := _HermesImplementation.contract.Call(opts, &out, "validatePromise", _channelId, _amount, _transactorFee, _preimage, _signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatePromise is a free data retrieval call binding the contract method 0x70603a7f.
//
// Solidity: function validatePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) view returns(bool)
func (_HermesImplementation *HermesImplementationSession) ValidatePromise(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (bool, error) {
	return _HermesImplementation.Contract.ValidatePromise(&_HermesImplementation.CallOpts, _channelId, _amount, _transactorFee, _preimage, _signature)
}

// ValidatePromise is a free data retrieval call binding the contract method 0x70603a7f.
//
// Solidity: function validatePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) ValidatePromise(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (bool, error) {
	return _HermesImplementation.Contract.ValidatePromise(&_HermesImplementation.CallOpts, _channelId, _amount, _transactorFee, _preimage, _signature)
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactor) ActivateChannelOpening(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "activateChannelOpening")
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationSession) ActivateChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ActivateChannelOpening(&_HermesImplementation.TransactOpts)
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ActivateChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ActivateChannelOpening(&_HermesImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationTransactor) ClaimEthers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "claimEthers")
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationSession) ClaimEthers() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimEthers(&_HermesImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ClaimEthers() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimEthers(&_HermesImplementation.TransactOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationTransactor) ClaimTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "claimTokens", _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimTokens(&_HermesImplementation.TransactOpts, _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimTokens(&_HermesImplementation.TransactOpts, _token)
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationTransactor) CloseHermes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "closeHermes")
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationSession) CloseHermes() (*types.Transaction, error) {
	return _HermesImplementation.Contract.CloseHermes(&_HermesImplementation.TransactOpts)
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) CloseHermes() (*types.Transaction, error) {
	return _HermesImplementation.Contract.CloseHermes(&_HermesImplementation.TransactOpts)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0x7295973a.
//
// Solidity: function decreaseStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) DecreaseStake(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "decreaseStake", _identity, _amount, _transactorFee, _signature)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0x7295973a.
//
// Solidity: function decreaseStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) DecreaseStake(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.DecreaseStake(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _signature)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0x7295973a.
//
// Solidity: function decreaseStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) DecreaseStake(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.DecreaseStake(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _signature)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationTransactor) GetStakeBack(opts *bind.TransactOpts, _beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "getStakeBack", _beneficiary)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationSession) GetStakeBack(_beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.GetStakeBack(&_HermesImplementation.TransactOpts, _beneficiary)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) GetStakeBack(_beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.GetStakeBack(&_HermesImplementation.TransactOpts, _beneficiary)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) IncreaseHermesStake(opts *bind.TransactOpts, _additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "increaseHermesStake", _additionalStake)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationSession) IncreaseHermesStake(_additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseHermesStake(&_HermesImplementation.TransactOpts, _additionalStake)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) IncreaseHermesStake(_additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseHermesStake(&_HermesImplementation.TransactOpts, _additionalStake)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactor) IncreaseStake(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "increaseStake", _channelId, _amount)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationSession) IncreaseStake(_channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseStake(&_HermesImplementation.TransactOpts, _channelId, _amount)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) IncreaseStake(_channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseStake(&_HermesImplementation.TransactOpts, _channelId, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x699a0885.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake, address _dexAddress) returns()
func (_HermesImplementation *HermesImplementationTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int, _dexAddress common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "initialize", _token, _operator, _fee, _minStake, _maxStake, _dexAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x699a0885.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake, address _dexAddress) returns()
func (_HermesImplementation *HermesImplementationSession) Initialize(_token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int, _dexAddress common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Initialize(&_HermesImplementation.TransactOpts, _token, _operator, _fee, _minStake, _maxStake, _dexAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x699a0885.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake, address _dexAddress) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) Initialize(_token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int, _dexAddress common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Initialize(&_HermesImplementation.TransactOpts, _token, _operator, _fee, _minStake, _maxStake, _dexAddress)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x24f453d1.
//
// Solidity: function openChannel(address _identity, uint256 _amountToStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) OpenChannel(opts *bind.TransactOpts, _identity common.Address, _amountToStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "openChannel", _identity, _amountToStake)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x24f453d1.
//
// Solidity: function openChannel(address _identity, uint256 _amountToStake) returns()
func (_HermesImplementation *HermesImplementationSession) OpenChannel(_identity common.Address, _amountToStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.OpenChannel(&_HermesImplementation.TransactOpts, _identity, _amountToStake)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x24f453d1.
//
// Solidity: function openChannel(address _identity, uint256 _amountToStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) OpenChannel(_identity common.Address, _amountToStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.OpenChannel(&_HermesImplementation.TransactOpts, _identity, _amountToStake)
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactor) PauseChannelOpening(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "pauseChannelOpening")
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationSession) PauseChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.PauseChannelOpening(&_HermesImplementation.TransactOpts)
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) PauseChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.PauseChannelOpening(&_HermesImplementation.TransactOpts)
}

// PayAndSettle is a paid mutator transaction binding the contract method 0x52a8e78d.
//
// Solidity: function payAndSettle(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature, address _beneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationTransactor) PayAndSettle(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte, _beneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "payAndSettle", _identity, _amount, _transactorFee, _preimage, _signature, _beneficiary, _beneficiarySignature)
}

// PayAndSettle is a paid mutator transaction binding the contract method 0x52a8e78d.
//
// Solidity: function payAndSettle(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature, address _beneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationSession) PayAndSettle(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte, _beneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.PayAndSettle(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature, _beneficiary, _beneficiarySignature)
}

// PayAndSettle is a paid mutator transaction binding the contract method 0x52a8e78d.
//
// Solidity: function payAndSettle(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature, address _beneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) PayAndSettle(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte, _beneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.PayAndSettle(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature, _beneficiary, _beneficiarySignature)
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationTransactor) ResolveEmergency(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "resolveEmergency")
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationSession) ResolveEmergency() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ResolveEmergency(&_HermesImplementation.TransactOpts)
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ResolveEmergency() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ResolveEmergency(&_HermesImplementation.TransactOpts)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetFundsDestination(opts *bind.TransactOpts, _newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setFundsDestination", _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetFundsDestination(&_HermesImplementation.TransactOpts, _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetFundsDestination(&_HermesImplementation.TransactOpts, _newDestination)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetHermesFee(opts *bind.TransactOpts, _newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setHermesFee", _newFee)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationSession) SetHermesFee(_newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetHermesFee(&_HermesImplementation.TransactOpts, _newFee)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetHermesFee(_newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetHermesFee(&_HermesImplementation.TransactOpts, _newFee)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetMaxStake(opts *bind.TransactOpts, _newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setMaxStake", _newMaxStake)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationSession) SetMaxStake(_newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMaxStake(&_HermesImplementation.TransactOpts, _newMaxStake)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetMaxStake(_newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMaxStake(&_HermesImplementation.TransactOpts, _newMaxStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetMinStake(opts *bind.TransactOpts, _newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setMinStake", _newMinStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationSession) SetMinStake(_newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMinStake(&_HermesImplementation.TransactOpts, _newMinStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetMinStake(_newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMinStake(&_HermesImplementation.TransactOpts, _newMinStake)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0x71d2ff1b.
//
// Solidity: function settleIntoStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleIntoStake(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleIntoStake", _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0x71d2ff1b.
//
// Solidity: function settleIntoStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleIntoStake(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleIntoStake(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0x71d2ff1b.
//
// Solidity: function settleIntoStake(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleIntoStake(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleIntoStake(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettlePromise(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settlePromise", _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettlePromise(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettlePromise(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettlePromise(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettlePromise(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x53d2a0ff.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _promiseSignature, address _newBeneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleWithBeneficiary(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleWithBeneficiary", _identity, _amount, _transactorFee, _preimage, _promiseSignature, _newBeneficiary, _beneficiarySignature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x53d2a0ff.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _promiseSignature, address _newBeneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleWithBeneficiary(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithBeneficiary(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _promiseSignature, _newBeneficiary, _beneficiarySignature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x53d2a0ff.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _promiseSignature, address _newBeneficiary, bytes _beneficiarySignature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleWithBeneficiary(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _beneficiarySignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithBeneficiary(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _promiseSignature, _newBeneficiary, _beneficiarySignature)
}

// SettleWithDEX is a paid mutator transaction binding the contract method 0x02062d12.
//
// Solidity: function settleWithDEX(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleWithDEX(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleWithDEX", _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleWithDEX is a paid mutator transaction binding the contract method 0x02062d12.
//
// Solidity: function settleWithDEX(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleWithDEX(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithDEX(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// SettleWithDEX is a paid mutator transaction binding the contract method 0x02062d12.
//
// Solidity: function settleWithDEX(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _preimage, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleWithDEX(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _preimage [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithDEX(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _preimage, _signature)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.TransferOwnership(&_HermesImplementation.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.TransferOwnership(&_HermesImplementation.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactor) Withdraw(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "withdraw", _beneficiary, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationSession) Withdraw(_beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Withdraw(&_HermesImplementation.TransactOpts, _beneficiary, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) Withdraw(_beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Withdraw(&_HermesImplementation.TransactOpts, _beneficiary, _amount)
}

// HermesImplementationChannelOpeningActivatedIterator is returned from FilterChannelOpeningActivated and is used to iterate over the raw logs and unpacked data for ChannelOpeningActivated events raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningActivatedIterator struct {
	Event *HermesImplementationChannelOpeningActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelOpeningActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelOpeningActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelOpeningActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelOpeningActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelOpeningActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelOpeningActivated represents a ChannelOpeningActivated event raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningActivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChannelOpeningActivated is a free log retrieval operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelOpeningActivated(opts *bind.FilterOpts) (*HermesImplementationChannelOpeningActivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelOpeningActivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelOpeningActivatedIterator{contract: _HermesImplementation.contract, event: "ChannelOpeningActivated", logs: logs, sub: sub}, nil
}

// WatchChannelOpeningActivated is a free log subscription operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelOpeningActivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelOpeningActivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelOpeningActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelOpeningActivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpeningActivated is a log parse operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelOpeningActivated(log types.Log) (*HermesImplementationChannelOpeningActivated, error) {
	event := new(HermesImplementationChannelOpeningActivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationChannelOpeningPausedIterator is returned from FilterChannelOpeningPaused and is used to iterate over the raw logs and unpacked data for ChannelOpeningPaused events raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningPausedIterator struct {
	Event *HermesImplementationChannelOpeningPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelOpeningPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelOpeningPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelOpeningPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelOpeningPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelOpeningPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelOpeningPaused represents a ChannelOpeningPaused event raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningPaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChannelOpeningPaused is a free log retrieval operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelOpeningPaused(opts *bind.FilterOpts) (*HermesImplementationChannelOpeningPausedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelOpeningPaused")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelOpeningPausedIterator{contract: _HermesImplementation.contract, event: "ChannelOpeningPaused", logs: logs, sub: sub}, nil
}

// WatchChannelOpeningPaused is a free log subscription operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelOpeningPaused(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelOpeningPaused) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelOpeningPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelOpeningPaused)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpeningPaused is a log parse operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelOpeningPaused(log types.Log) (*HermesImplementationChannelOpeningPaused, error) {
	event := new(HermesImplementationChannelOpeningPaused)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationDestinationChangedIterator is returned from FilterDestinationChanged and is used to iterate over the raw logs and unpacked data for DestinationChanged events raised by the HermesImplementation contract.
type HermesImplementationDestinationChangedIterator struct {
	Event *HermesImplementationDestinationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationDestinationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationDestinationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationDestinationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationDestinationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationDestinationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationDestinationChanged represents a DestinationChanged event raised by the HermesImplementation contract.
type HermesImplementationDestinationChanged struct {
	PreviousDestination common.Address
	NewDestination      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDestinationChanged is a free log retrieval operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) FilterDestinationChanged(opts *bind.FilterOpts, previousDestination []common.Address, newDestination []common.Address) (*HermesImplementationDestinationChangedIterator, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationDestinationChangedIterator{contract: _HermesImplementation.contract, event: "DestinationChanged", logs: logs, sub: sub}, nil
}

// WatchDestinationChanged is a free log subscription operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) WatchDestinationChanged(opts *bind.WatchOpts, sink chan<- *HermesImplementationDestinationChanged, previousDestination []common.Address, newDestination []common.Address) (event.Subscription, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationDestinationChanged)
				if err := _HermesImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDestinationChanged is a log parse operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) ParseDestinationChanged(log types.Log) (*HermesImplementationDestinationChanged, error) {
	event := new(HermesImplementationDestinationChanged)
	if err := _HermesImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationFundsWithdrawnedIterator is returned from FilterFundsWithdrawned and is used to iterate over the raw logs and unpacked data for FundsWithdrawned events raised by the HermesImplementation contract.
type HermesImplementationFundsWithdrawnedIterator struct {
	Event *HermesImplementationFundsWithdrawned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationFundsWithdrawnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationFundsWithdrawned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationFundsWithdrawned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationFundsWithdrawnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationFundsWithdrawnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationFundsWithdrawned represents a FundsWithdrawned event raised by the HermesImplementation contract.
type HermesImplementationFundsWithdrawned struct {
	Amount      *big.Int
	Beneficiary common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterFundsWithdrawned is a free log retrieval operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) FilterFundsWithdrawned(opts *bind.FilterOpts) (*HermesImplementationFundsWithdrawnedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "FundsWithdrawned")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationFundsWithdrawnedIterator{contract: _HermesImplementation.contract, event: "FundsWithdrawned", logs: logs, sub: sub}, nil
}

// WatchFundsWithdrawned is a free log subscription operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) WatchFundsWithdrawned(opts *bind.WatchOpts, sink chan<- *HermesImplementationFundsWithdrawned) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "FundsWithdrawned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationFundsWithdrawned)
				if err := _HermesImplementation.contract.UnpackLog(event, "FundsWithdrawned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsWithdrawned is a log parse operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) ParseFundsWithdrawned(log types.Log) (*HermesImplementationFundsWithdrawned, error) {
	event := new(HermesImplementationFundsWithdrawned)
	if err := _HermesImplementation.contract.UnpackLog(event, "FundsWithdrawned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesClosedIterator is returned from FilterHermesClosed and is used to iterate over the raw logs and unpacked data for HermesClosed events raised by the HermesImplementation contract.
type HermesImplementationHermesClosedIterator struct {
	Event *HermesImplementationHermesClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesClosed represents a HermesClosed event raised by the HermesImplementation contract.
type HermesImplementationHermesClosed struct {
	BlockTimestamp *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterHermesClosed is a free log retrieval operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockTimestamp)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesClosed(opts *bind.FilterOpts) (*HermesImplementationHermesClosedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesClosed")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesClosedIterator{contract: _HermesImplementation.contract, event: "HermesClosed", logs: logs, sub: sub}, nil
}

// WatchHermesClosed is a free log subscription operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockTimestamp)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesClosed(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesClosed) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesClosed)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesClosed is a log parse operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockTimestamp)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesClosed(log types.Log) (*HermesImplementationHermesClosed, error) {
	event := new(HermesImplementationHermesClosed)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesClosed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesFeeUpdatedIterator is returned from FilterHermesFeeUpdated and is used to iterate over the raw logs and unpacked data for HermesFeeUpdated events raised by the HermesImplementation contract.
type HermesImplementationHermesFeeUpdatedIterator struct {
	Event *HermesImplementationHermesFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesFeeUpdated represents a HermesFeeUpdated event raised by the HermesImplementation contract.
type HermesImplementationHermesFeeUpdated struct {
	NewFee    uint16
	ValidFrom uint64
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterHermesFeeUpdated is a free log retrieval operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFrom)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesFeeUpdated(opts *bind.FilterOpts) (*HermesImplementationHermesFeeUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesFeeUpdatedIterator{contract: _HermesImplementation.contract, event: "HermesFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchHermesFeeUpdated is a free log subscription operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFrom)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesFeeUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesFeeUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesFeeUpdated is a log parse operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFrom)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesFeeUpdated(log types.Log) (*HermesImplementationHermesFeeUpdated, error) {
	event := new(HermesImplementationHermesFeeUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesPunishmentActivatedIterator is returned from FilterHermesPunishmentActivated and is used to iterate over the raw logs and unpacked data for HermesPunishmentActivated events raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentActivatedIterator struct {
	Event *HermesImplementationHermesPunishmentActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesPunishmentActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesPunishmentActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesPunishmentActivated represents a HermesPunishmentActivated event raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentActivated struct {
	ActivationBlockTime *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterHermesPunishmentActivated is a free log retrieval operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlockTime)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesPunishmentActivated(opts *bind.FilterOpts) (*HermesImplementationHermesPunishmentActivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesPunishmentActivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesPunishmentActivatedIterator{contract: _HermesImplementation.contract, event: "HermesPunishmentActivated", logs: logs, sub: sub}, nil
}

// WatchHermesPunishmentActivated is a free log subscription operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlockTime)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesPunishmentActivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesPunishmentActivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesPunishmentActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesPunishmentActivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesPunishmentActivated is a log parse operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlockTime)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesPunishmentActivated(log types.Log) (*HermesImplementationHermesPunishmentActivated, error) {
	event := new(HermesImplementationHermesPunishmentActivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesPunishmentDeactivatedIterator is returned from FilterHermesPunishmentDeactivated and is used to iterate over the raw logs and unpacked data for HermesPunishmentDeactivated events raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentDeactivatedIterator struct {
	Event *HermesImplementationHermesPunishmentDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesPunishmentDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesPunishmentDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesPunishmentDeactivated represents a HermesPunishmentDeactivated event raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentDeactivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterHermesPunishmentDeactivated is a free log retrieval operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesPunishmentDeactivated(opts *bind.FilterOpts) (*HermesImplementationHermesPunishmentDeactivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesPunishmentDeactivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesPunishmentDeactivatedIterator{contract: _HermesImplementation.contract, event: "HermesPunishmentDeactivated", logs: logs, sub: sub}, nil
}

// WatchHermesPunishmentDeactivated is a free log subscription operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesPunishmentDeactivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesPunishmentDeactivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesPunishmentDeactivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesPunishmentDeactivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesPunishmentDeactivated is a log parse operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesPunishmentDeactivated(log types.Log) (*HermesImplementationHermesPunishmentDeactivated, error) {
	event := new(HermesImplementationHermesPunishmentDeactivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationHermesStakeIncreasedIterator is returned from FilterHermesStakeIncreased and is used to iterate over the raw logs and unpacked data for HermesStakeIncreased events raised by the HermesImplementation contract.
type HermesImplementationHermesStakeIncreasedIterator struct {
	Event *HermesImplementationHermesStakeIncreased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesStakeIncreasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesStakeIncreased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesStakeIncreased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesStakeIncreasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesStakeIncreasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesStakeIncreased represents a HermesStakeIncreased event raised by the HermesImplementation contract.
type HermesImplementationHermesStakeIncreased struct {
	NewStake *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterHermesStakeIncreased is a free log retrieval operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesStakeIncreased(opts *bind.FilterOpts) (*HermesImplementationHermesStakeIncreasedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesStakeIncreased")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesStakeIncreasedIterator{contract: _HermesImplementation.contract, event: "HermesStakeIncreased", logs: logs, sub: sub}, nil
}

// WatchHermesStakeIncreased is a free log subscription operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesStakeIncreased(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesStakeIncreased) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesStakeIncreased")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesStakeIncreased)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesStakeIncreased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesStakeIncreased is a log parse operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesStakeIncreased(log types.Log) (*HermesImplementationHermesStakeIncreased, error) {
	event := new(HermesImplementationHermesStakeIncreased)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesStakeIncreased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationMaxStakeValueUpdatedIterator is returned from FilterMaxStakeValueUpdated and is used to iterate over the raw logs and unpacked data for MaxStakeValueUpdated events raised by the HermesImplementation contract.
type HermesImplementationMaxStakeValueUpdatedIterator struct {
	Event *HermesImplementationMaxStakeValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationMaxStakeValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationMaxStakeValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationMaxStakeValueUpdated represents a MaxStakeValueUpdated event raised by the HermesImplementation contract.
type HermesImplementationMaxStakeValueUpdated struct {
	NewMaxStake *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMaxStakeValueUpdated is a free log retrieval operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterMaxStakeValueUpdated(opts *bind.FilterOpts) (*HermesImplementationMaxStakeValueUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "MaxStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationMaxStakeValueUpdatedIterator{contract: _HermesImplementation.contract, event: "MaxStakeValueUpdated", logs: logs, sub: sub}, nil
}

// WatchMaxStakeValueUpdated is a free log subscription operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchMaxStakeValueUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationMaxStakeValueUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "MaxStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationMaxStakeValueUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "MaxStakeValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaxStakeValueUpdated is a log parse operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseMaxStakeValueUpdated(log types.Log) (*HermesImplementationMaxStakeValueUpdated, error) {
	event := new(HermesImplementationMaxStakeValueUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "MaxStakeValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationMinStakeValueUpdatedIterator is returned from FilterMinStakeValueUpdated and is used to iterate over the raw logs and unpacked data for MinStakeValueUpdated events raised by the HermesImplementation contract.
type HermesImplementationMinStakeValueUpdatedIterator struct {
	Event *HermesImplementationMinStakeValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationMinStakeValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationMinStakeValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationMinStakeValueUpdated represents a MinStakeValueUpdated event raised by the HermesImplementation contract.
type HermesImplementationMinStakeValueUpdated struct {
	NewMinStake *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMinStakeValueUpdated is a free log retrieval operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterMinStakeValueUpdated(opts *bind.FilterOpts) (*HermesImplementationMinStakeValueUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "MinStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationMinStakeValueUpdatedIterator{contract: _HermesImplementation.contract, event: "MinStakeValueUpdated", logs: logs, sub: sub}, nil
}

// WatchMinStakeValueUpdated is a free log subscription operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchMinStakeValueUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationMinStakeValueUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "MinStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationMinStakeValueUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "MinStakeValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinStakeValueUpdated is a log parse operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseMinStakeValueUpdated(log types.Log) (*HermesImplementationMinStakeValueUpdated, error) {
	event := new(HermesImplementationMinStakeValueUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "MinStakeValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationNewStakeIterator is returned from FilterNewStake and is used to iterate over the raw logs and unpacked data for NewStake events raised by the HermesImplementation contract.
type HermesImplementationNewStakeIterator struct {
	Event *HermesImplementationNewStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationNewStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationNewStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationNewStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationNewStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationNewStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationNewStake represents a NewStake event raised by the HermesImplementation contract.
type HermesImplementationNewStake struct {
	ChannelId   [32]byte
	StakeAmount *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewStake is a free log retrieval operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) FilterNewStake(opts *bind.FilterOpts, channelId [][32]byte) (*HermesImplementationNewStakeIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "NewStake", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationNewStakeIterator{contract: _HermesImplementation.contract, event: "NewStake", logs: logs, sub: sub}, nil
}

// WatchNewStake is a free log subscription operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) WatchNewStake(opts *bind.WatchOpts, sink chan<- *HermesImplementationNewStake, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "NewStake", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationNewStake)
				if err := _HermesImplementation.contract.UnpackLog(event, "NewStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewStake is a log parse operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) ParseNewStake(log types.Log) (*HermesImplementationNewStake, error) {
	event := new(HermesImplementationNewStake)
	if err := _HermesImplementation.contract.UnpackLog(event, "NewStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the HermesImplementation contract.
type HermesImplementationOwnershipTransferredIterator struct {
	Event *HermesImplementationOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationOwnershipTransferred represents a OwnershipTransferred event raised by the HermesImplementation contract.
type HermesImplementationOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*HermesImplementationOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationOwnershipTransferredIterator{contract: _HermesImplementation.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *HermesImplementationOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationOwnershipTransferred)
				if err := _HermesImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) ParseOwnershipTransferred(log types.Log) (*HermesImplementationOwnershipTransferred, error) {
	event := new(HermesImplementationOwnershipTransferred)
	if err := _HermesImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HermesImplementationPromiseSettledIterator is returned from FilterPromiseSettled and is used to iterate over the raw logs and unpacked data for PromiseSettled events raised by the HermesImplementation contract.
type HermesImplementationPromiseSettledIterator struct {
	Event *HermesImplementationPromiseSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationPromiseSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationPromiseSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationPromiseSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationPromiseSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationPromiseSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationPromiseSettled represents a PromiseSettled event raised by the HermesImplementation contract.
type HermesImplementationPromiseSettled struct {
	Identity                common.Address
	ChannelId               [32]byte
	Beneficiary             common.Address
	AmountSentToBeneficiary *big.Int
	Fees                    *big.Int
	Lock                    [32]byte
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterPromiseSettled is a free log retrieval operation binding the contract event 0xbe62ac0eb86179a8bcebe2f194ee1a147982a61a2ee67ff7e70b3fad25ec16d7.
//
// Solidity: event PromiseSettled(address indexed identity, bytes32 indexed channelId, address indexed beneficiary, uint256 amountSentToBeneficiary, uint256 fees, bytes32 lock)
func (_HermesImplementation *HermesImplementationFilterer) FilterPromiseSettled(opts *bind.FilterOpts, identity []common.Address, channelId [][32]byte, beneficiary []common.Address) (*HermesImplementationPromiseSettledIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}
	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}
	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "PromiseSettled", identityRule, channelIdRule, beneficiaryRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationPromiseSettledIterator{contract: _HermesImplementation.contract, event: "PromiseSettled", logs: logs, sub: sub}, nil
}

// WatchPromiseSettled is a free log subscription operation binding the contract event 0xbe62ac0eb86179a8bcebe2f194ee1a147982a61a2ee67ff7e70b3fad25ec16d7.
//
// Solidity: event PromiseSettled(address indexed identity, bytes32 indexed channelId, address indexed beneficiary, uint256 amountSentToBeneficiary, uint256 fees, bytes32 lock)
func (_HermesImplementation *HermesImplementationFilterer) WatchPromiseSettled(opts *bind.WatchOpts, sink chan<- *HermesImplementationPromiseSettled, identity []common.Address, channelId [][32]byte, beneficiary []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}
	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}
	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "PromiseSettled", identityRule, channelIdRule, beneficiaryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationPromiseSettled)
				if err := _HermesImplementation.contract.UnpackLog(event, "PromiseSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromiseSettled is a log parse operation binding the contract event 0xbe62ac0eb86179a8bcebe2f194ee1a147982a61a2ee67ff7e70b3fad25ec16d7.
//
// Solidity: event PromiseSettled(address indexed identity, bytes32 indexed channelId, address indexed beneficiary, uint256 amountSentToBeneficiary, uint256 fees, bytes32 lock)
func (_HermesImplementation *HermesImplementationFilterer) ParsePromiseSettled(log types.Log) (*HermesImplementationPromiseSettled, error) {
	event := new(HermesImplementationPromiseSettled)
	if err := _HermesImplementation.contract.UnpackLog(event, "PromiseSettled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

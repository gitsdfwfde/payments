/* Mysterium network payment library.
 *
 * Copyright (C) 2021 BlockDev AG
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistryHermes is an auto generated low-level Go binding around an user-defined struct.
type RegistryHermes struct {
	Operator common.Address
	ImplVer  *big.Int
	Stake    [24]byte
	Url      []byte
}

// RegistryABI is the input ABI used to generate the binding from.
const RegistryABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"}],\"name\":\"ConsumerChannelCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newURL\",\"type\":\"bytes\"}],\"name\":\"HermesURLUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimalStake\",\"type\":\"uint256\"}],\"name\":\"MinimalHermesStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hermesOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ur\",\"type\":\"bytes\"}],\"name\":\"RegisteredHermes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"RegisteredIdentity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalHermesStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentRegistry\",\"outputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_dexAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimalHermesStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_channelImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesImplementation\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_parentRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"openConsumerChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"openConsumerChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hermesStake\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_hermesFee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minChannelStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxChannelStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_url\",\"type\":\"bytes\"}],\"name\":\"registerHermes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"getChannelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"getHermes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"implVer\",\"type\":\"uint256\"},{\"internalType\":\"function()viewexternalreturns(uint256)\",\"name\":\"stake\",\"type\":\"function\"},{\"internalType\":\"bytes\",\"name\":\"url\",\"type\":\"bytes\"}],\"internalType\":\"structRegistry.Hermes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getHermesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"}],\"name\":\"getHermesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"getHermesURL\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_url\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateHermesURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"getProxyCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimalStake\",\"type\":\"uint256\"}],\"name\":\"setMinimalHermesStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getChannelImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChannelImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getHermesImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHermesImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newChannelImplAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newHermesImplAddress\",\"type\":\"address\"}],\"name\":\"setImplementations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastImplVer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasParentRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"isHermes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"isChannelOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"transferCollectedFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// RegistryBin is the compiled bytecode used for deploying new contracts.
var RegistryBin = "0x608060405234801561001057600080fd5b50613641806100206000396000f3fe6080604052600436106102295760003560e01c8063acc831d011610123578063d16f38c8116100ab578063e617aaac1161006f578063e617aaac14610647578063f2fde38b14610667578063f58c5b6e14610687578063fc0c546a1461069c578063ff9935cb146106b15761024f565b8063d16f38c8146105a5578063d5929fe3146105ba578063df8de3e7146105da578063e0b6c323146105fa578063e3252537146106275761024f565b8063c957543b116100f2578063c957543b14610510578063c9b84d4d14610530578063cdd596e014610545578063cf10c96914610565578063d0171d79146105855761024f565b8063acc831d014610490578063add10dda146104b0578063bf1eb88a146104d0578063c3c5a547146104f05761024f565b80636332b080116101b157806385bff3411161017557806385bff341146103f95780638cfef547146104195780638da5cb5b146104395780639936a87b1461044e578063ab867213146104635761024f565b80636332b0801461039057806366cf5875146103a5578063692058c2146103ba5780636931b550146103cf5780637c671a21146103e45761024f565b806341ca71ab116101f857806341ca71ab146102e15780634787d09c1461030e5780634b6bd6be1461032e578063505a1b311461034e57806352631ab41461036e5761024f565b806304614e0b146102545780631de9db4014610276578063238e130a146102ac578063392e53cd146102cc5761024f565b3661024f5760405162461bcd60e51b815260040161024690613214565b60405180910390fd5b600080fd5b34801561026057600080fd5b5061027461026f36600461294f565b6106d1565b005b34801561028257600080fd5b506102966102913660046127ab565b610820565b6040516102a39190612e35565b60405180910390f35b3480156102b857600080fd5b506102746102c7366004612773565b6108c5565b3480156102d857600080fd5b50610296610995565b3480156102ed57600080fd5b506103016102fc366004612b6c565b6109a6565b6040516102a39190612d0b565b34801561031a57600080fd5b506102746103293660046127ab565b6109d7565b34801561033a57600080fd5b50610301610349366004612924565b610a35565b34801561035a57600080fd5b50610301610369366004612773565b610a69565b34801561037a57600080fd5b50610383610b1e565b6040516102a39190613495565b34801561039c57600080fd5b50610383610b24565b3480156103b157600080fd5b50610383610b2e565b3480156103c657600080fd5b50610301610b34565b3480156103db57600080fd5b50610274610b43565b3480156103f057600080fd5b50610301610b94565b34801561040557600080fd5b506102746104143660046127ab565b610bc9565b34801561042557600080fd5b50610301610434366004612b6c565b610d25565b34801561044557600080fd5b50610301610d57565b34801561045a57600080fd5b50610301610d66565b34801561046f57600080fd5b5061048361047e366004612773565b610d9e565b6040516102a39190612e40565b34801561049c57600080fd5b506103016104ab366004612773565b610e1e565b3480156104bc57600080fd5b506102746104cb3660046128bb565b610e49565b3480156104dc57600080fd5b506104836104eb366004612773565b610f4e565b3480156104fc57600080fd5b5061029661050b366004612773565b610ffc565b34801561051c57600080fd5b5061027461052b366004612b6c565b6110ac565b34801561053c57600080fd5b50610301611171565b34801561055157600080fd5b50610296610560366004612773565b611180565b34801561057157600080fd5b50610274610580366004612a12565b61126f565b34801561059157600080fd5b506102746105a036600461285b565b6114a2565b3480156105b157600080fd5b50610296611635565b3480156105c657600080fd5b506102746105d5366004612990565b611646565b3480156105e657600080fd5b506102746105f5366004612773565b61199f565b34801561060657600080fd5b5061061a610615366004612773565b611b05565b6040516102a39190613449565b34801561063357600080fd5b50610274610642366004612773565b611ca6565b34801561065357600080fd5b506103016106623660046127ab565b611e2e565b34801561067357600080fd5b50610274610682366004612773565b611e99565b34801561069357600080fd5b50610301611f9a565b3480156106a857600080fd5b50610301611fa9565b3480156106bd57600080fd5b506102746106cc3660046127e3565b611fb8565b6106da836120d6565b6106f65760405162461bcd60e51b81526004016102469061338a565b600061073e82610704612188565b30878760405160200161071a9493929190612c6b565b6040516020818303038152906040528051906020012061218c90919063ffffffff16565b90506001600160a01b0381166107665760405162461bcd60e51b81526004016102469061325b565b6002546001600160a01b03166370a082316107818387611e2e565b6040518263ffffffff1660e01b815260040161079d9190612d0b565b60206040518083038186803b1580156107b557600080fd5b505afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed9190612b84565b83111561080c5760405162461bcd60e51b815260040161024690613116565b610819818560008661220c565b5050505050565b600061083461082f8484611e2e565b6123cf565b806108be5750600654604051633985eaab60e21b81526108be916001600160a01b03169063e617aaac9061086e9087908790600401612d5c565b60206040518083038186803b15801561088657600080fd5b505afa15801561089a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f919061278f565b9392505050565b6000546001600160a01b03163314806108e757506000546001600160a01b0316155b610926576040805162461bcd60e51b815260206004820181905260248201526000805160206135ec833981519152604482015290519081900360640190fd5b6001600160a01b03811661093957600080fd5b6001546040516001600160a01b038084169216907fe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0316151590565b6000600782815481106109b557fe5b60009182526020909120600290910201546001600160a01b031690505b919050565b6109e0816120d6565b6109fc5760405162461bcd60e51b81526004016102469061338a565b610a068282610820565b15610a235760405162461bcd60e51b815260040161024690612eed565b610a30828260008061220c565b505050565b600080610a4461047e84610d25565b80516020909101209050610a616001600160a01b038516826123d5565b949350505050565b6000610a73611635565b15610aff5760065460405163505a1b3160e01b81526001600160a01b039091169063505a1b3190610aa8908590600401612d0b565b60206040518083038186803b158015610ac057600080fd5b505afa158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af8919061278f565b90506109d2565b506001600160a01b039081166000908152600960205260409020541690565b60035481565b6007546000190190565b60055481565b6004546001600160a01b031681565b6001546001600160a01b0316610b5857600080fd5b6001546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610b91573d6000803e3d6000fd5b50565b60006007610ba0610b24565b81548110610baa57fe5b60009182526020909120600290910201546001600160a01b0316905090565b6000546001600160a01b0316331480610beb57506000546001600160a01b0316155b610c2a576040805162461bcd60e51b815260206004820181905260248201526000805160206135ec833981519152604482015290519081900360640190fd5b610c32610995565b610c4e5760405162461bcd60e51b81526004016102469061316a565b610c57826123cf565b8015610c675750610c67816123cf565b610c835760405162461bcd60e51b815260040161024690612e99565b604080518082019091526001600160a01b0392831681529082166020820190815260078054600181018255600091909152915160029092027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688810180549385166001600160a01b031994851617905590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6899091018054919093169116179055565b600060078281548110610d3457fe5b60009182526020909120600290910201600101546001600160a01b031692915050565b6000546001600160a01b031690565b60006007610d72610b24565b81548110610d7c57fe5b60009182526020909120600160029092020101546001600160a01b0316905090565b60606000604051806060016040528060378152602001613593603791399050606083901b60005b60148160ff161015610e1557818160ff1660148110610de057fe5b1a60f81b838260140160ff1681518110610df657fe5b60200101906001600160f81b031916908160001a905350600101610dc5565b50909392505050565b600080610e2c61047e610d66565b805160209091012090506108be6001600160a01b038416826123d5565b610e52836120d6565b610e6e5760405162461bcd60e51b815260040161024690612fa8565b6003805460018101909155604051600091610e9891849161071a9130918991899190602001612bc8565b6001600160a01b03808616600090815260086020526040902054919250808316911614610ed75760405162461bcd60e51b8152600401610246906133d5565b6001600160a01b03841660009081526008602090815260409091208451610f06926003909201918601906125ff565b50836001600160a01b03167fd8c638c85547b8717e0d5ca292cff6dbe8fc02fa6e6863a047971c39511643c784604051610f409190612e40565b60405180910390a250505050565b6001600160a01b03811660009081526008602090815260409182902060030180548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610ff05780601f10610fc557610100808354040283529160200191610ff0565b820191906000526020600020905b815481529060010190602001808311610fd357829003601f168201915b50505050509050919050565b6000611006611635565b1561108b5760065460405163c3c5a54760e01b81526001600160a01b039091169063c3c5a5479061103b908590600401612d0b565b60206040518083038186803b15801561105357600080fd5b505afa158015611067573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af89190612a86565b506001600160a01b0390811660009081526009602052604090205416151590565b6000546001600160a01b03163314806110ce57506000546001600160a01b0316155b61110d576040805162461bcd60e51b815260206004820181905260248201526000805160206135ec833981519152604482015290519081900360640190fd5b611115610995565b6111315760405162461bcd60e51b815260040161024690612f3e565b60058190556040517f645a9c74d34a0b1095b113252ad5e9afa0373f15b4b21760fb3a24b4b9d1ec3090611166908390613495565b60405180910390a150565b6006546001600160a01b031681565b6001600160a01b038082166000908152600860205260408120805460019091015491921690826111b08383610a35565b9050846001600160a01b0316816001600160a01b0316146111d757600093505050506109d2565b6111e0816123cf565b80611266575060065460405163066eacb760e51b81526001600160a01b039091169063cdd596e090611216908890600401612d0b565b60206040518083038186803b15801561122e57600080fd5b505afa158015611242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112669190612a86565b95945050505050565b611278856120d6565b6112945760405162461bcd60e51b81526004016102469061338a565b60006112bc826112a2612188565b308989898960405160200161071a96959493929190612c98565b90506001600160a01b0381166112e45760405162461bcd60e51b815260040161024690613348565b60006112f08686612416565b6002549091506001600160a01b03166370a0823161130e848a611e2e565b6040518263ffffffff1660e01b815260040161132a9190612d0b565b60206040518083038186803b15801561134257600080fd5b505afa158015611356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137a9190612b84565b8111156113995760405162461bcd60e51b815260040161024690613116565b6113a58288868461220c565b50851561140d576040516324f453d160e01b81526001600160a01b038816906324f453d1906113da9085908a90600401612d43565b600060405180830381600087803b1580156113f457600080fd5b505af1158015611408573d6000803e3d6000fd5b505050505b84156114995760025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906114459033908990600401612d43565b602060405180830381600087803b15801561145f57600080fd5b505af1158015611473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114979190612a86565b505b50505050505050565b6001600160a01b0382166114c85760405162461bcd60e51b8152600401610246906133fe565b6114d0611635565b156115405760065460405163d0171d7960e01b81526001600160a01b039091169063d0171d799061150990869086908690600401612da9565b600060405180830381600087803b15801561152357600080fd5b505af1158015611537573d6000803e3d6000fd5b50505050610a30565b6003805460010190556000611553611635565b61155d573061156a565b6006546001600160a01b03165b905060006115938361157a612188565b60035460405161071a929187918b918b91602001612cd6565b9050846001600160a01b0316816001600160a01b0316146115c65760405162461bcd60e51b8152600401610246906131c7565b6001600160a01b038581166000818152600960205260409081902080546001600160a01b0319169388169390931790925590517f768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d90611626908790612d0b565b60405180910390a25050505050565b6006546001600160a01b0316151590565b61164e610995565b61166a5760405162461bcd60e51b8152600401610246906132a5565b6001600160a01b0386166116905760405162461bcd60e51b81526004016102469061304f565b6005548510156116b25760405162461bcd60e51b815260040161024690612ff2565b60006116bd87610e1e565b90506116c881611180565b156116e55760405162461bcd60e51b81526004016102469061309e565b6000611704886001600160a01b03166116ff61047e610d66565b612470565b6002546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061173990339085908c90600401612d1f565b602060405180830381600087803b15801561175357600080fd5b505af1158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b9190612a86565b506002546004805460405163699a088560e01b81526001600160a01b038086169463699a0885946117cd94918316938f938e938e938e93919092169101612dd5565b600060405180830381600087803b1580156117e757600080fd5b505af11580156117fb573d6000803e3d6000fd5b505050506040518060800160405280896001600160a01b03168152602001611821610b24565b815263fc0e3d90602084811b640100000000600160c01b0390811692909217604090811b828501529283018790526001600160a01b03868116600090815260088352849020855181546001600160a01b0319169216919091178155848201516001820155848401516002820180546001600160c01b03191663ffffffff9290961c918216919094161793909317909155606083015180516118c892600385019201906125ff565b505060025460405163095ea7b360e01b81526001600160a01b03909116915063095ea7b3906118ff90859060001990600401612d43565b602060405180830381600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190612a86565b50816001600160a01b03167ff06d60cc2f463635fd237ad87f1d007af54840b82e7e4561707b1be63d91c260898560405161198d929190612e11565b60405180910390a25050505050505050565b6001546001600160a01b03166119b457600080fd5b6002546001600160a01b0382811691161415611a015760405162461bcd60e51b815260040180806020018281038252602581526020018061354c6025913960400191505060405180910390fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a5057600080fd5b505afa158015611a64573d6000803e3d6000fd5b505050506040513d6020811015611a7a57600080fd5b50516001546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015611ad557600080fd5b505af1158015611ae9573d6000803e3d6000fd5b505050506040513d6020811015611aff57600080fd5b50505050565b611b0d61268b565b611b1682611180565b80611b265750611b24611635565b155b611bb35760065460405163e0b6c32360e01b81526001600160a01b039091169063e0b6c32390611b5a908590600401612d0b565b60006040518083038186803b158015611b7257600080fd5b505afa158015611b86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bae9190810190612ac5565b611ca0565b6001600160a01b038281166000908152600860209081526040918290208251608081018452815490941684526001808201548584015260028083015463ffffffff8116640100000000600160c01b0390911617851b8686015260038301805486516101009482161594909402600019011691909104601f810185900485028301850190955284825291936060860193919291830182828015611c965780601f10611c6b57610100808354040283529160200191611c96565b820191906000526020600020905b815481529060010190602001808311611c7957829003601f168201915b5050505050815250505b92915050565b6000546001600160a01b0316331480611cc857506000546001600160a01b0316155b611d07576040805162461bcd60e51b815260206004820181905260248201526000805160206135ec833981519152604482015290519081900360640190fd5b6002546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611d38903090600401612d0b565b60206040518083038186803b158015611d5057600080fd5b505afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d889190612b84565b905060008111611daa5760405162461bcd60e51b815260040161024690613302565b60025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611ddc9085908590600401612d43565b602060405180830381600087803b158015611df657600080fd5b505af1158015611e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190612a86565b6001600160a01b0381166000908152600860205260408120600101548190611e599061047e906109a6565b80519060200120905060008484604051602001611e77929190612c15565b60405160208183030381529060405280519060200120905061126681836123d5565b6000546001600160a01b0316331480611ebb57506000546001600160a01b0316155b611efa576040805162461bcd60e51b815260206004820181905260248201526000805160206135ec833981519152604482015290519081900360640190fd5b6001600160a01b038116611f3f5760405162461bcd60e51b81526004018080602001828103825260268152602001806135266026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031690565b6002546001600160a01b031681565b6000546001600160a01b0316331480611fda57506000546001600160a01b0316155b612019576040805162461bcd60e51b815260206004820181905260248201526000805160206135ec833981519152604482015290519081900360640190fd5b612021610995565b1561203e5760405162461bcd60e51b8152600401610246906130e1565b60058490556001600160a01b03861661205657600080fd5b600280546001600160a01b0319166001600160a01b0388811691909117909155851661208157600080fd5b600480546001600160a01b0319166001600160a01b0387161790556120a68383610bc9565b6120af33611e99565b600680546001600160a01b0319166001600160a01b03929092169190911790555050505050565b60006120e182611180565b6120fd5760405162461bcd60e51b815260040161024690612e53565b6000826001600160a01b0316634e69d5606040518163ffffffff1660e01b815260040160206040518083038186803b15801561213857600080fd5b505afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121709190612aa6565b9050600081600381111561218057fe5b149392505050565b4690565b600081516041146121e4576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6122028682858561248a565b9695505050505050565b6000808585604051602001612222929190612c15565b604051602081830303815290604052805190602001209050600061227061047e60086000896001600160a01b03166001600160a01b03168152602001908152602001600020600101546109a6565b9050600061227e8383612470565b60025460048054604051637b809f7b60e11b81529394506001600160a01b038086169463f7013ef6946122bf9490831693909216918e918e918d9101612d76565b600060405180830381600087803b1580156122d957600080fd5b505af11580156122ed573d6000803e3d6000fd5b50505050866001600160a01b0316886001600160a01b03167f2ed7bcf2ff03098102c7003d7ce2a633e4b49b8198b07de5383cdf4c0ab9228b836040516123349190612d0b565b60405180910390a36001600160a01b03861661234e578095505b61235788610ffc565b6123c4576001600160a01b038881166000818152600960205260409081902080546001600160a01b031916938a169390931790925590517fefaf768237c22e140a862d5d375ad5c153479fac3f8bcf8b580a1651fd62c3ef906123bb908990612d0b565b60405180910390a25b979650505050505050565b3b151590565b6040516000906123f7906001600160f81b031990309086908690602001612c37565b60408051601f1981840301815291905280516020909101209392505050565b6000828201838110156108be576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080838351602085016000f59050803b6108be57600080fd5b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156124eb5760405162461bcd60e51b81526004018080602001828103825260228152602001806135716022913960400191505060405180910390fd5b8360ff16601b148061250057508360ff16601c145b61253b5760405162461bcd60e51b81526004018080602001828103825260228152602001806135ca6022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612597573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611266576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612635576000855561267b565b82601f1061264e57805160ff191683800117855561267b565b8280016001018555821561267b579182015b8281111561267b578251825591602001919060010190612660565b506126879291506126b1565b5090565b604080516080810182526000808252602082018190529181019190915260608082015290565b5b8082111561268757600081556001016126b2565b600082601f8301126126d6578081fd5b81356126e96126e4826134c2565b61349e565b8181528460208386010111156126fd578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612727578081fd5b81516127356126e4826134c2565b818152846020838601011115612749578283fd5b610a618260208301602087016134e4565b805167ffffffffffffffff19811681146109d257600080fd5b600060208284031215612784578081fd5b81356108be81613510565b6000602082840312156127a0578081fd5b81516108be81613510565b600080604083850312156127bd578081fd5b82356127c881613510565b915060208301356127d881613510565b809150509250929050565b60008060008060008060c087890312156127fb578182fd5b863561280681613510565b9550602087013561281681613510565b945060408701359350606087013561282d81613510565b9250608087013561283d81613510565b915060a087013561284d81613510565b809150509295509295509295565b60008060006060848603121561286f578283fd5b833561287a81613510565b9250602084013561288a81613510565b9150604084013567ffffffffffffffff8111156128a5578182fd5b6128b1868287016126c6565b9150509250925092565b6000806000606084860312156128cf578283fd5b83356128da81613510565b9250602084013567ffffffffffffffff808211156128f6578384fd5b612902878388016126c6565b93506040860135915080821115612917578283fd5b506128b1868287016126c6565b60008060408385031215612936578182fd5b823561294181613510565b946020939093013593505050565b600080600060608486031215612963578283fd5b833561296e81613510565b925060208401359150604084013567ffffffffffffffff8111156128a5578182fd5b60008060008060008060c087890312156129a8578384fd5b86356129b381613510565b955060208701359450604087013561ffff811681146129d0578485fd5b9350606087013592506080870135915060a087013567ffffffffffffffff8111156129f9578182fd5b612a0589828a016126c6565b9150509295509295509295565b600080600080600060a08688031215612a29578283fd5b8535612a3481613510565b945060208601359350604086013592506060860135612a5281613510565b9150608086013567ffffffffffffffff811115612a6d578182fd5b612a79888289016126c6565b9150509295509295909350565b600060208284031215612a97578081fd5b815180151581146108be578182fd5b600060208284031215612ab7578081fd5b8151600481106108be578182fd5b600060208284031215612ad6578081fd5b815167ffffffffffffffff80821115612aed578283fd5b9083019060808286031215612b00578283fd5b604051608081018181108382111715612b1557fe5b6040528251612b2381613510565b815260208381015190820152612b3b6040840161275a565b6040820152606083015182811115612b51578485fd5b612b5d87828601612717565b60608301525095945050505050565b600060208284031215612b7d578081fd5b5035919050565b600060208284031215612b95578081fd5b5051919050565b60008151808452612bb48160208601602086016134e4565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808760601b168352808660601b166014840152508351612bff8160288501602088016134e4565b6028920191820192909252604801949350505050565b6001600160601b0319606093841b811682529190921b16601482015260280190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b9384526001600160601b0319606093841b811660208601529190921b166034830152604882015260680190565b9586526001600160601b0319606095861b8116602088015293851b841660348701526048860192909252606885015290911b166088820152609c0190565b9485526001600160601b0319606094851b8116602087015292841b83166034860152921b166048830152605c820152607c0190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039586168152938516602085015291841660408401529092166060820152608081019190915260a00190565b6001600160a01b0384811682528316602082015260606040820181905260009061126690830184612b9c565b6001600160a01b039687168152948616602086015261ffff9390931660408501526060840191909152608083015290911660a082015260c00190565b6001600160a01b0383168152604060208201819052600090610a6190830184612b9c565b901515815260200190565b6000602082526108be6020830184612b9c565b60208082526026908201527f52656769737472793a206865726d6573206861766520746f20626520726567696040820152651cdd195c995960d21b606082015260800190565b60208082526034908201527f52656769737472793a20696d706c656d656e746174696f6e73206861766520746040820152736f20626520736d61727420636f6e74726163747360601b606082015260800190565b60208082526031908201527f52656769737472793a207375636820636f6e73756d6572206368616e6e656c206040820152701a5cc8185b1c9958591e481bdc195b9959607a1b606082015260800190565b60208082526044908201527f52656769737472793a206f6e6c7920696e697469616c697a656420726567697360408201527f7472792063616e20736574206e6577206d696e696d616c206865726d6573207360608201526374616b6560e01b608082015260a00190565b6020808252602a908201527f52656769737472793a2070726f7669646564206865726d65732068617320746f6040820152692062652061637469766560b01b606082015260800190565b6020808252603c908201527f52656769737472793a206865726d6573206861766520746f207374616b65206160408201527f74206c65617374206d696e696d616c207374616b6520616d6f756e7400000000606082015260800190565b6020808252602f908201527f52656769737472793a206865726d6573206f70657261746f722063616e27742060408201526e6265207a65726f206164647265737360881b606082015260800190565b60208082526023908201527f52656769737472793a206865726d657320616c726561647920726567697374656040820152621c995960ea1b606082015260800190565b6020808252818101527f52656769737472793a20697320616c726561647920696e697469616c697a6564604082015260600190565b60208082526034908201527f52656769737472793a206e6f7420656e6f756768742066756e647320696e206360408201527368616e6e656c20746f20636f766572206665657360601b606082015260800190565b6020808252603f908201527f52656769737472793a206f6e6c7920696e697469616c697a656420726567697360408201527f7472792063616e20736574206e657720696d706c656d656e746174696f6e7300606082015260800190565b6020808252602d908201527f52656769737472793a206861766520746f206265207369676e6564206279206960408201526c3232b73a34ba3c9037bbb732b960991b606082015260800190565b60208082526027908201527f52656769737472793a2052656a656374696e67207478207769746820657468656040820152661c9cc81cd95b9d60ca1b606082015260800190565b6020808252602a908201527f52656769737472793a2077726f6e67206368616e6e656c206f70656e696e6967604082015269207369676e617475726560b01b606082015260800190565b60208082526039908201527f52656769737472793a206f6e6c7920696e697469616c697a656420726567697360408201527f7472792063616e207265676973746572206865726d6573657300000000000000606082015260800190565b60208082526026908201527f636f6c6c6563746564206665652063616e6e6f74206265206c657373207468616040820152656e207a65726f60d01b606082015260800190565b60208082526022908201527f52656769737472793a2077726f6e67206964656e74697479207369676e617475604082015261726560f01b606082015260800190565b6020808252602b908201527f52656769737472793a2070726f7669646564206865726d65732068617665207460408201526a6f2062652061637469766560a81b606082015260800190565b6020808252600f908201526e77726f6e67207369676e617475726560881b604082015260600190565b6020808252602b908201527f52656769737472793a2062656e65666963696172792063616e2774206265207a60408201526a65726f206164647265737360a81b606082015260800190565b60006020825260018060a01b0383511660208301526020830151604083015267ffffffffffffffff1960408401511660608301526060830151608080840152610a6160a0840182612b9c565b90815260200190565b60405181810167ffffffffffffffff811182821017156134ba57fe5b604052919050565b600067ffffffffffffffff8211156134d657fe5b50601f01601f191660200190565b60005b838110156134ff5781810151838201526020016134e7565b83811115611aff5750506000910152565b6001600160a01b0381168114610b9157600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736e617469766520746f6b656e2066756e64732063616e2774206265207265636f766572656445434453413a20696e76616c6964207369676e6174757265202773272076616c75653d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf345434453413a20696e76616c6964207369676e6174757265202776272076616c75654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d6b6fd7b89342653d4f0a5398ac841d8882a51fe12ceecdf5947ca1665af609764736f6c63430007060033"

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() view returns(address)
func (_Registry *RegistryCaller) Dex(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "dex")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() view returns(address)
func (_Registry *RegistrySession) Dex() (common.Address, error) {
	return _Registry.Contract.Dex(&_Registry.CallOpts)
}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() view returns(address)
func (_Registry *RegistryCallerSession) Dex() (common.Address, error) {
	return _Registry.Contract.Dex(&_Registry.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x505a1b31.
//
// Solidity: function getBeneficiary(address _identity) view returns(address)
func (_Registry *RegistryCaller) GetBeneficiary(opts *bind.CallOpts, _identity common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getBeneficiary", _identity)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x505a1b31.
//
// Solidity: function getBeneficiary(address _identity) view returns(address)
func (_Registry *RegistrySession) GetBeneficiary(_identity common.Address) (common.Address, error) {
	return _Registry.Contract.GetBeneficiary(&_Registry.CallOpts, _identity)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x505a1b31.
//
// Solidity: function getBeneficiary(address _identity) view returns(address)
func (_Registry *RegistryCallerSession) GetBeneficiary(_identity common.Address) (common.Address, error) {
	return _Registry.Contract.GetBeneficiary(&_Registry.CallOpts, _identity)
}

// GetChannelAddress is a free data retrieval call binding the contract method 0xe617aaac.
//
// Solidity: function getChannelAddress(address _identity, address _hermesId) view returns(address)
func (_Registry *RegistryCaller) GetChannelAddress(opts *bind.CallOpts, _identity common.Address, _hermesId common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getChannelAddress", _identity, _hermesId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetChannelAddress is a free data retrieval call binding the contract method 0xe617aaac.
//
// Solidity: function getChannelAddress(address _identity, address _hermesId) view returns(address)
func (_Registry *RegistrySession) GetChannelAddress(_identity common.Address, _hermesId common.Address) (common.Address, error) {
	return _Registry.Contract.GetChannelAddress(&_Registry.CallOpts, _identity, _hermesId)
}

// GetChannelAddress is a free data retrieval call binding the contract method 0xe617aaac.
//
// Solidity: function getChannelAddress(address _identity, address _hermesId) view returns(address)
func (_Registry *RegistryCallerSession) GetChannelAddress(_identity common.Address, _hermesId common.Address) (common.Address, error) {
	return _Registry.Contract.GetChannelAddress(&_Registry.CallOpts, _identity, _hermesId)
}

// GetChannelImplementation is a free data retrieval call binding the contract method 0x41ca71ab.
//
// Solidity: function getChannelImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistryCaller) GetChannelImplementation(opts *bind.CallOpts, _implVer *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getChannelImplementation", _implVer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetChannelImplementation is a free data retrieval call binding the contract method 0x41ca71ab.
//
// Solidity: function getChannelImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistrySession) GetChannelImplementation(_implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetChannelImplementation(&_Registry.CallOpts, _implVer)
}

// GetChannelImplementation is a free data retrieval call binding the contract method 0x41ca71ab.
//
// Solidity: function getChannelImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistryCallerSession) GetChannelImplementation(_implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetChannelImplementation(&_Registry.CallOpts, _implVer)
}

// GetChannelImplementation0 is a free data retrieval call binding the contract method 0x7c671a21.
//
// Solidity: function getChannelImplementation() view returns(address)
func (_Registry *RegistryCaller) GetChannelImplementation0(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getChannelImplementation0")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetChannelImplementation0 is a free data retrieval call binding the contract method 0x7c671a21.
//
// Solidity: function getChannelImplementation() view returns(address)
func (_Registry *RegistrySession) GetChannelImplementation0() (common.Address, error) {
	return _Registry.Contract.GetChannelImplementation0(&_Registry.CallOpts)
}

// GetChannelImplementation0 is a free data retrieval call binding the contract method 0x7c671a21.
//
// Solidity: function getChannelImplementation() view returns(address)
func (_Registry *RegistryCallerSession) GetChannelImplementation0() (common.Address, error) {
	return _Registry.Contract.GetChannelImplementation0(&_Registry.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_Registry *RegistryCaller) GetFundsDestination(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getFundsDestination")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_Registry *RegistrySession) GetFundsDestination() (common.Address, error) {
	return _Registry.Contract.GetFundsDestination(&_Registry.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_Registry *RegistryCallerSession) GetFundsDestination() (common.Address, error) {
	return _Registry.Contract.GetFundsDestination(&_Registry.CallOpts)
}

// GetHermes is a free data retrieval call binding the contract method 0xe0b6c323.
//
// Solidity: function getHermes(address _hermesId) view returns((address,uint256,function,bytes))
func (_Registry *RegistryCaller) GetHermes(opts *bind.CallOpts, _hermesId common.Address) (RegistryHermes, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermes", _hermesId)

	if err != nil {
		return *new(RegistryHermes), err
	}

	out0 := *abi.ConvertType(out[0], new(RegistryHermes)).(*RegistryHermes)

	return out0, err

}

// GetHermes is a free data retrieval call binding the contract method 0xe0b6c323.
//
// Solidity: function getHermes(address _hermesId) view returns((address,uint256,function,bytes))
func (_Registry *RegistrySession) GetHermes(_hermesId common.Address) (RegistryHermes, error) {
	return _Registry.Contract.GetHermes(&_Registry.CallOpts, _hermesId)
}

// GetHermes is a free data retrieval call binding the contract method 0xe0b6c323.
//
// Solidity: function getHermes(address _hermesId) view returns((address,uint256,function,bytes))
func (_Registry *RegistryCallerSession) GetHermes(_hermesId common.Address) (RegistryHermes, error) {
	return _Registry.Contract.GetHermes(&_Registry.CallOpts, _hermesId)
}

// GetHermesAddress is a free data retrieval call binding the contract method 0x4b6bd6be.
//
// Solidity: function getHermesAddress(address _hermesOperator, uint256 _implVer) view returns(address)
func (_Registry *RegistryCaller) GetHermesAddress(opts *bind.CallOpts, _hermesOperator common.Address, _implVer *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesAddress", _hermesOperator, _implVer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetHermesAddress is a free data retrieval call binding the contract method 0x4b6bd6be.
//
// Solidity: function getHermesAddress(address _hermesOperator, uint256 _implVer) view returns(address)
func (_Registry *RegistrySession) GetHermesAddress(_hermesOperator common.Address, _implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetHermesAddress(&_Registry.CallOpts, _hermesOperator, _implVer)
}

// GetHermesAddress is a free data retrieval call binding the contract method 0x4b6bd6be.
//
// Solidity: function getHermesAddress(address _hermesOperator, uint256 _implVer) view returns(address)
func (_Registry *RegistryCallerSession) GetHermesAddress(_hermesOperator common.Address, _implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetHermesAddress(&_Registry.CallOpts, _hermesOperator, _implVer)
}

// GetHermesAddress0 is a free data retrieval call binding the contract method 0xacc831d0.
//
// Solidity: function getHermesAddress(address _hermesOperator) view returns(address)
func (_Registry *RegistryCaller) GetHermesAddress0(opts *bind.CallOpts, _hermesOperator common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesAddress0", _hermesOperator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetHermesAddress0 is a free data retrieval call binding the contract method 0xacc831d0.
//
// Solidity: function getHermesAddress(address _hermesOperator) view returns(address)
func (_Registry *RegistrySession) GetHermesAddress0(_hermesOperator common.Address) (common.Address, error) {
	return _Registry.Contract.GetHermesAddress0(&_Registry.CallOpts, _hermesOperator)
}

// GetHermesAddress0 is a free data retrieval call binding the contract method 0xacc831d0.
//
// Solidity: function getHermesAddress(address _hermesOperator) view returns(address)
func (_Registry *RegistryCallerSession) GetHermesAddress0(_hermesOperator common.Address) (common.Address, error) {
	return _Registry.Contract.GetHermesAddress0(&_Registry.CallOpts, _hermesOperator)
}

// GetHermesImplementation is a free data retrieval call binding the contract method 0x8cfef547.
//
// Solidity: function getHermesImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistryCaller) GetHermesImplementation(opts *bind.CallOpts, _implVer *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesImplementation", _implVer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetHermesImplementation is a free data retrieval call binding the contract method 0x8cfef547.
//
// Solidity: function getHermesImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistrySession) GetHermesImplementation(_implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetHermesImplementation(&_Registry.CallOpts, _implVer)
}

// GetHermesImplementation is a free data retrieval call binding the contract method 0x8cfef547.
//
// Solidity: function getHermesImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistryCallerSession) GetHermesImplementation(_implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetHermesImplementation(&_Registry.CallOpts, _implVer)
}

// GetHermesImplementation0 is a free data retrieval call binding the contract method 0x9936a87b.
//
// Solidity: function getHermesImplementation() view returns(address)
func (_Registry *RegistryCaller) GetHermesImplementation0(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesImplementation0")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetHermesImplementation0 is a free data retrieval call binding the contract method 0x9936a87b.
//
// Solidity: function getHermesImplementation() view returns(address)
func (_Registry *RegistrySession) GetHermesImplementation0() (common.Address, error) {
	return _Registry.Contract.GetHermesImplementation0(&_Registry.CallOpts)
}

// GetHermesImplementation0 is a free data retrieval call binding the contract method 0x9936a87b.
//
// Solidity: function getHermesImplementation() view returns(address)
func (_Registry *RegistryCallerSession) GetHermesImplementation0() (common.Address, error) {
	return _Registry.Contract.GetHermesImplementation0(&_Registry.CallOpts)
}

// GetHermesURL is a free data retrieval call binding the contract method 0xbf1eb88a.
//
// Solidity: function getHermesURL(address _hermesId) view returns(bytes)
func (_Registry *RegistryCaller) GetHermesURL(opts *bind.CallOpts, _hermesId common.Address) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesURL", _hermesId)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetHermesURL is a free data retrieval call binding the contract method 0xbf1eb88a.
//
// Solidity: function getHermesURL(address _hermesId) view returns(bytes)
func (_Registry *RegistrySession) GetHermesURL(_hermesId common.Address) ([]byte, error) {
	return _Registry.Contract.GetHermesURL(&_Registry.CallOpts, _hermesId)
}

// GetHermesURL is a free data retrieval call binding the contract method 0xbf1eb88a.
//
// Solidity: function getHermesURL(address _hermesId) view returns(bytes)
func (_Registry *RegistryCallerSession) GetHermesURL(_hermesId common.Address) ([]byte, error) {
	return _Registry.Contract.GetHermesURL(&_Registry.CallOpts, _hermesId)
}

// GetLastImplVer is a free data retrieval call binding the contract method 0x6332b080.
//
// Solidity: function getLastImplVer() view returns(uint256)
func (_Registry *RegistryCaller) GetLastImplVer(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getLastImplVer")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastImplVer is a free data retrieval call binding the contract method 0x6332b080.
//
// Solidity: function getLastImplVer() view returns(uint256)
func (_Registry *RegistrySession) GetLastImplVer() (*big.Int, error) {
	return _Registry.Contract.GetLastImplVer(&_Registry.CallOpts)
}

// GetLastImplVer is a free data retrieval call binding the contract method 0x6332b080.
//
// Solidity: function getLastImplVer() view returns(uint256)
func (_Registry *RegistryCallerSession) GetLastImplVer() (*big.Int, error) {
	return _Registry.Contract.GetLastImplVer(&_Registry.CallOpts)
}

// GetProxyCode is a free data retrieval call binding the contract method 0xab867213.
//
// Solidity: function getProxyCode(address _implementation) pure returns(bytes)
func (_Registry *RegistryCaller) GetProxyCode(opts *bind.CallOpts, _implementation common.Address) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getProxyCode", _implementation)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetProxyCode is a free data retrieval call binding the contract method 0xab867213.
//
// Solidity: function getProxyCode(address _implementation) pure returns(bytes)
func (_Registry *RegistrySession) GetProxyCode(_implementation common.Address) ([]byte, error) {
	return _Registry.Contract.GetProxyCode(&_Registry.CallOpts, _implementation)
}

// GetProxyCode is a free data retrieval call binding the contract method 0xab867213.
//
// Solidity: function getProxyCode(address _implementation) pure returns(bytes)
func (_Registry *RegistryCallerSession) GetProxyCode(_implementation common.Address) ([]byte, error) {
	return _Registry.Contract.GetProxyCode(&_Registry.CallOpts, _implementation)
}

// HasParentRegistry is a free data retrieval call binding the contract method 0xd16f38c8.
//
// Solidity: function hasParentRegistry() view returns(bool)
func (_Registry *RegistryCaller) HasParentRegistry(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "hasParentRegistry")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasParentRegistry is a free data retrieval call binding the contract method 0xd16f38c8.
//
// Solidity: function hasParentRegistry() view returns(bool)
func (_Registry *RegistrySession) HasParentRegistry() (bool, error) {
	return _Registry.Contract.HasParentRegistry(&_Registry.CallOpts)
}

// HasParentRegistry is a free data retrieval call binding the contract method 0xd16f38c8.
//
// Solidity: function hasParentRegistry() view returns(bool)
func (_Registry *RegistryCallerSession) HasParentRegistry() (bool, error) {
	return _Registry.Contract.HasParentRegistry(&_Registry.CallOpts)
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x1de9db40.
//
// Solidity: function isChannelOpened(address _identity, address _hermesId) view returns(bool)
func (_Registry *RegistryCaller) IsChannelOpened(opts *bind.CallOpts, _identity common.Address, _hermesId common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isChannelOpened", _identity, _hermesId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChannelOpened is a free data retrieval call binding the contract method 0x1de9db40.
//
// Solidity: function isChannelOpened(address _identity, address _hermesId) view returns(bool)
func (_Registry *RegistrySession) IsChannelOpened(_identity common.Address, _hermesId common.Address) (bool, error) {
	return _Registry.Contract.IsChannelOpened(&_Registry.CallOpts, _identity, _hermesId)
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x1de9db40.
//
// Solidity: function isChannelOpened(address _identity, address _hermesId) view returns(bool)
func (_Registry *RegistryCallerSession) IsChannelOpened(_identity common.Address, _hermesId common.Address) (bool, error) {
	return _Registry.Contract.IsChannelOpened(&_Registry.CallOpts, _identity, _hermesId)
}

// IsHermes is a free data retrieval call binding the contract method 0xcdd596e0.
//
// Solidity: function isHermes(address _hermesId) view returns(bool)
func (_Registry *RegistryCaller) IsHermes(opts *bind.CallOpts, _hermesId common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isHermes", _hermesId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsHermes is a free data retrieval call binding the contract method 0xcdd596e0.
//
// Solidity: function isHermes(address _hermesId) view returns(bool)
func (_Registry *RegistrySession) IsHermes(_hermesId common.Address) (bool, error) {
	return _Registry.Contract.IsHermes(&_Registry.CallOpts, _hermesId)
}

// IsHermes is a free data retrieval call binding the contract method 0xcdd596e0.
//
// Solidity: function isHermes(address _hermesId) view returns(bool)
func (_Registry *RegistryCallerSession) IsHermes(_hermesId common.Address) (bool, error) {
	return _Registry.Contract.IsHermes(&_Registry.CallOpts, _hermesId)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Registry *RegistryCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Registry *RegistrySession) IsInitialized() (bool, error) {
	return _Registry.Contract.IsInitialized(&_Registry.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Registry *RegistryCallerSession) IsInitialized() (bool, error) {
	return _Registry.Contract.IsInitialized(&_Registry.CallOpts)
}

// IsRegistered is a free data retrieval call binding the contract method 0xc3c5a547.
//
// Solidity: function isRegistered(address _identity) view returns(bool)
func (_Registry *RegistryCaller) IsRegistered(opts *bind.CallOpts, _identity common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isRegistered", _identity)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0xc3c5a547.
//
// Solidity: function isRegistered(address _identity) view returns(bool)
func (_Registry *RegistrySession) IsRegistered(_identity common.Address) (bool, error) {
	return _Registry.Contract.IsRegistered(&_Registry.CallOpts, _identity)
}

// IsRegistered is a free data retrieval call binding the contract method 0xc3c5a547.
//
// Solidity: function isRegistered(address _identity) view returns(bool)
func (_Registry *RegistryCallerSession) IsRegistered(_identity common.Address) (bool, error) {
	return _Registry.Contract.IsRegistered(&_Registry.CallOpts, _identity)
}

// LastNonce is a free data retrieval call binding the contract method 0x52631ab4.
//
// Solidity: function lastNonce() view returns(uint256)
func (_Registry *RegistryCaller) LastNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "lastNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastNonce is a free data retrieval call binding the contract method 0x52631ab4.
//
// Solidity: function lastNonce() view returns(uint256)
func (_Registry *RegistrySession) LastNonce() (*big.Int, error) {
	return _Registry.Contract.LastNonce(&_Registry.CallOpts)
}

// LastNonce is a free data retrieval call binding the contract method 0x52631ab4.
//
// Solidity: function lastNonce() view returns(uint256)
func (_Registry *RegistryCallerSession) LastNonce() (*big.Int, error) {
	return _Registry.Contract.LastNonce(&_Registry.CallOpts)
}

// MinimalHermesStake is a free data retrieval call binding the contract method 0x66cf5875.
//
// Solidity: function minimalHermesStake() view returns(uint256)
func (_Registry *RegistryCaller) MinimalHermesStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "minimalHermesStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimalHermesStake is a free data retrieval call binding the contract method 0x66cf5875.
//
// Solidity: function minimalHermesStake() view returns(uint256)
func (_Registry *RegistrySession) MinimalHermesStake() (*big.Int, error) {
	return _Registry.Contract.MinimalHermesStake(&_Registry.CallOpts)
}

// MinimalHermesStake is a free data retrieval call binding the contract method 0x66cf5875.
//
// Solidity: function minimalHermesStake() view returns(uint256)
func (_Registry *RegistryCallerSession) MinimalHermesStake() (*big.Int, error) {
	return _Registry.Contract.MinimalHermesStake(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// ParentRegistry is a free data retrieval call binding the contract method 0xc9b84d4d.
//
// Solidity: function parentRegistry() view returns(address)
func (_Registry *RegistryCaller) ParentRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "parentRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentRegistry is a free data retrieval call binding the contract method 0xc9b84d4d.
//
// Solidity: function parentRegistry() view returns(address)
func (_Registry *RegistrySession) ParentRegistry() (common.Address, error) {
	return _Registry.Contract.ParentRegistry(&_Registry.CallOpts)
}

// ParentRegistry is a free data retrieval call binding the contract method 0xc9b84d4d.
//
// Solidity: function parentRegistry() view returns(address)
func (_Registry *RegistryCallerSession) ParentRegistry() (common.Address, error) {
	return _Registry.Contract.ParentRegistry(&_Registry.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Registry *RegistryCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Registry *RegistrySession) Token() (common.Address, error) {
	return _Registry.Contract.Token(&_Registry.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Registry *RegistryCallerSession) Token() (common.Address, error) {
	return _Registry.Contract.Token(&_Registry.CallOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_Registry *RegistryTransactor) ClaimEthers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "claimEthers")
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_Registry *RegistrySession) ClaimEthers() (*types.Transaction, error) {
	return _Registry.Contract.ClaimEthers(&_Registry.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_Registry *RegistryTransactorSession) ClaimEthers() (*types.Transaction, error) {
	return _Registry.Contract.ClaimEthers(&_Registry.TransactOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_Registry *RegistryTransactor) ClaimTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "claimTokens", _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_Registry *RegistrySession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ClaimTokens(&_Registry.TransactOpts, _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_Registry *RegistryTransactorSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ClaimTokens(&_Registry.TransactOpts, _token)
}

// Initialize is a paid mutator transaction binding the contract method 0xff9935cb.
//
// Solidity: function initialize(address _tokenAddress, address _dexAddress, uint256 _minimalHermesStake, address _channelImplementation, address _hermesImplementation, address _parentRegistry) returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts, _tokenAddress common.Address, _dexAddress common.Address, _minimalHermesStake *big.Int, _channelImplementation common.Address, _hermesImplementation common.Address, _parentRegistry common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize", _tokenAddress, _dexAddress, _minimalHermesStake, _channelImplementation, _hermesImplementation, _parentRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0xff9935cb.
//
// Solidity: function initialize(address _tokenAddress, address _dexAddress, uint256 _minimalHermesStake, address _channelImplementation, address _hermesImplementation, address _parentRegistry) returns()
func (_Registry *RegistrySession) Initialize(_tokenAddress common.Address, _dexAddress common.Address, _minimalHermesStake *big.Int, _channelImplementation common.Address, _hermesImplementation common.Address, _parentRegistry common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _tokenAddress, _dexAddress, _minimalHermesStake, _channelImplementation, _hermesImplementation, _parentRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0xff9935cb.
//
// Solidity: function initialize(address _tokenAddress, address _dexAddress, uint256 _minimalHermesStake, address _channelImplementation, address _hermesImplementation, address _parentRegistry) returns()
func (_Registry *RegistryTransactorSession) Initialize(_tokenAddress common.Address, _dexAddress common.Address, _minimalHermesStake *big.Int, _channelImplementation common.Address, _hermesImplementation common.Address, _parentRegistry common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _tokenAddress, _dexAddress, _minimalHermesStake, _channelImplementation, _hermesImplementation, _parentRegistry)
}

// OpenConsumerChannel is a paid mutator transaction binding the contract method 0x04614e0b.
//
// Solidity: function openConsumerChannel(address _hermesId, uint256 _transactorFee, bytes _signature) returns()
func (_Registry *RegistryTransactor) OpenConsumerChannel(opts *bind.TransactOpts, _hermesId common.Address, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "openConsumerChannel", _hermesId, _transactorFee, _signature)
}

// OpenConsumerChannel is a paid mutator transaction binding the contract method 0x04614e0b.
//
// Solidity: function openConsumerChannel(address _hermesId, uint256 _transactorFee, bytes _signature) returns()
func (_Registry *RegistrySession) OpenConsumerChannel(_hermesId common.Address, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.OpenConsumerChannel(&_Registry.TransactOpts, _hermesId, _transactorFee, _signature)
}

// OpenConsumerChannel is a paid mutator transaction binding the contract method 0x04614e0b.
//
// Solidity: function openConsumerChannel(address _hermesId, uint256 _transactorFee, bytes _signature) returns()
func (_Registry *RegistryTransactorSession) OpenConsumerChannel(_hermesId common.Address, _transactorFee *big.Int, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.OpenConsumerChannel(&_Registry.TransactOpts, _hermesId, _transactorFee, _signature)
}

// OpenConsumerChannel0 is a paid mutator transaction binding the contract method 0x4787d09c.
//
// Solidity: function openConsumerChannel(address _identity, address _hermesId) returns()
func (_Registry *RegistryTransactor) OpenConsumerChannel0(opts *bind.TransactOpts, _identity common.Address, _hermesId common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "openConsumerChannel0", _identity, _hermesId)
}

// OpenConsumerChannel0 is a paid mutator transaction binding the contract method 0x4787d09c.
//
// Solidity: function openConsumerChannel(address _identity, address _hermesId) returns()
func (_Registry *RegistrySession) OpenConsumerChannel0(_identity common.Address, _hermesId common.Address) (*types.Transaction, error) {
	return _Registry.Contract.OpenConsumerChannel0(&_Registry.TransactOpts, _identity, _hermesId)
}

// OpenConsumerChannel0 is a paid mutator transaction binding the contract method 0x4787d09c.
//
// Solidity: function openConsumerChannel(address _identity, address _hermesId) returns()
func (_Registry *RegistryTransactorSession) OpenConsumerChannel0(_identity common.Address, _hermesId common.Address) (*types.Transaction, error) {
	return _Registry.Contract.OpenConsumerChannel0(&_Registry.TransactOpts, _identity, _hermesId)
}

// RegisterHermes is a paid mutator transaction binding the contract method 0xd5929fe3.
//
// Solidity: function registerHermes(address _hermesOperator, uint256 _hermesStake, uint16 _hermesFee, uint256 _minChannelStake, uint256 _maxChannelStake, bytes _url) returns()
func (_Registry *RegistryTransactor) RegisterHermes(opts *bind.TransactOpts, _hermesOperator common.Address, _hermesStake *big.Int, _hermesFee uint16, _minChannelStake *big.Int, _maxChannelStake *big.Int, _url []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerHermes", _hermesOperator, _hermesStake, _hermesFee, _minChannelStake, _maxChannelStake, _url)
}

// RegisterHermes is a paid mutator transaction binding the contract method 0xd5929fe3.
//
// Solidity: function registerHermes(address _hermesOperator, uint256 _hermesStake, uint16 _hermesFee, uint256 _minChannelStake, uint256 _maxChannelStake, bytes _url) returns()
func (_Registry *RegistrySession) RegisterHermes(_hermesOperator common.Address, _hermesStake *big.Int, _hermesFee uint16, _minChannelStake *big.Int, _maxChannelStake *big.Int, _url []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterHermes(&_Registry.TransactOpts, _hermesOperator, _hermesStake, _hermesFee, _minChannelStake, _maxChannelStake, _url)
}

// RegisterHermes is a paid mutator transaction binding the contract method 0xd5929fe3.
//
// Solidity: function registerHermes(address _hermesOperator, uint256 _hermesStake, uint16 _hermesFee, uint256 _minChannelStake, uint256 _maxChannelStake, bytes _url) returns()
func (_Registry *RegistryTransactorSession) RegisterHermes(_hermesOperator common.Address, _hermesStake *big.Int, _hermesFee uint16, _minChannelStake *big.Int, _maxChannelStake *big.Int, _url []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterHermes(&_Registry.TransactOpts, _hermesOperator, _hermesStake, _hermesFee, _minChannelStake, _maxChannelStake, _url)
}

// RegisterIdentity is a paid mutator transaction binding the contract method 0xcf10c969.
//
// Solidity: function registerIdentity(address _hermesId, uint256 _stakeAmount, uint256 _transactorFee, address _beneficiary, bytes _signature) returns()
func (_Registry *RegistryTransactor) RegisterIdentity(opts *bind.TransactOpts, _hermesId common.Address, _stakeAmount *big.Int, _transactorFee *big.Int, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerIdentity", _hermesId, _stakeAmount, _transactorFee, _beneficiary, _signature)
}

// RegisterIdentity is a paid mutator transaction binding the contract method 0xcf10c969.
//
// Solidity: function registerIdentity(address _hermesId, uint256 _stakeAmount, uint256 _transactorFee, address _beneficiary, bytes _signature) returns()
func (_Registry *RegistrySession) RegisterIdentity(_hermesId common.Address, _stakeAmount *big.Int, _transactorFee *big.Int, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterIdentity(&_Registry.TransactOpts, _hermesId, _stakeAmount, _transactorFee, _beneficiary, _signature)
}

// RegisterIdentity is a paid mutator transaction binding the contract method 0xcf10c969.
//
// Solidity: function registerIdentity(address _hermesId, uint256 _stakeAmount, uint256 _transactorFee, address _beneficiary, bytes _signature) returns()
func (_Registry *RegistryTransactorSession) RegisterIdentity(_hermesId common.Address, _stakeAmount *big.Int, _transactorFee *big.Int, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterIdentity(&_Registry.TransactOpts, _hermesId, _stakeAmount, _transactorFee, _beneficiary, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0xd0171d79.
//
// Solidity: function setBeneficiary(address _identity, address _newBeneficiary, bytes _signature) returns()
func (_Registry *RegistryTransactor) SetBeneficiary(opts *bind.TransactOpts, _identity common.Address, _newBeneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setBeneficiary", _identity, _newBeneficiary, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0xd0171d79.
//
// Solidity: function setBeneficiary(address _identity, address _newBeneficiary, bytes _signature) returns()
func (_Registry *RegistrySession) SetBeneficiary(_identity common.Address, _newBeneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.SetBeneficiary(&_Registry.TransactOpts, _identity, _newBeneficiary, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0xd0171d79.
//
// Solidity: function setBeneficiary(address _identity, address _newBeneficiary, bytes _signature) returns()
func (_Registry *RegistryTransactorSession) SetBeneficiary(_identity common.Address, _newBeneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.SetBeneficiary(&_Registry.TransactOpts, _identity, _newBeneficiary, _signature)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_Registry *RegistryTransactor) SetFundsDestination(opts *bind.TransactOpts, _newDestination common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setFundsDestination", _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_Registry *RegistrySession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetFundsDestination(&_Registry.TransactOpts, _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_Registry *RegistryTransactorSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetFundsDestination(&_Registry.TransactOpts, _newDestination)
}

// SetImplementations is a paid mutator transaction binding the contract method 0x85bff341.
//
// Solidity: function setImplementations(address _newChannelImplAddress, address _newHermesImplAddress) returns()
func (_Registry *RegistryTransactor) SetImplementations(opts *bind.TransactOpts, _newChannelImplAddress common.Address, _newHermesImplAddress common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setImplementations", _newChannelImplAddress, _newHermesImplAddress)
}

// SetImplementations is a paid mutator transaction binding the contract method 0x85bff341.
//
// Solidity: function setImplementations(address _newChannelImplAddress, address _newHermesImplAddress) returns()
func (_Registry *RegistrySession) SetImplementations(_newChannelImplAddress common.Address, _newHermesImplAddress common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetImplementations(&_Registry.TransactOpts, _newChannelImplAddress, _newHermesImplAddress)
}

// SetImplementations is a paid mutator transaction binding the contract method 0x85bff341.
//
// Solidity: function setImplementations(address _newChannelImplAddress, address _newHermesImplAddress) returns()
func (_Registry *RegistryTransactorSession) SetImplementations(_newChannelImplAddress common.Address, _newHermesImplAddress common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetImplementations(&_Registry.TransactOpts, _newChannelImplAddress, _newHermesImplAddress)
}

// SetMinimalHermesStake is a paid mutator transaction binding the contract method 0xc957543b.
//
// Solidity: function setMinimalHermesStake(uint256 _newMinimalStake) returns()
func (_Registry *RegistryTransactor) SetMinimalHermesStake(opts *bind.TransactOpts, _newMinimalStake *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setMinimalHermesStake", _newMinimalStake)
}

// SetMinimalHermesStake is a paid mutator transaction binding the contract method 0xc957543b.
//
// Solidity: function setMinimalHermesStake(uint256 _newMinimalStake) returns()
func (_Registry *RegistrySession) SetMinimalHermesStake(_newMinimalStake *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.SetMinimalHermesStake(&_Registry.TransactOpts, _newMinimalStake)
}

// SetMinimalHermesStake is a paid mutator transaction binding the contract method 0xc957543b.
//
// Solidity: function setMinimalHermesStake(uint256 _newMinimalStake) returns()
func (_Registry *RegistryTransactorSession) SetMinimalHermesStake(_newMinimalStake *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.SetMinimalHermesStake(&_Registry.TransactOpts, _newMinimalStake)
}

// TransferCollectedFeeTo is a paid mutator transaction binding the contract method 0xe3252537.
//
// Solidity: function transferCollectedFeeTo(address _beneficiary) returns()
func (_Registry *RegistryTransactor) TransferCollectedFeeTo(opts *bind.TransactOpts, _beneficiary common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferCollectedFeeTo", _beneficiary)
}

// TransferCollectedFeeTo is a paid mutator transaction binding the contract method 0xe3252537.
//
// Solidity: function transferCollectedFeeTo(address _beneficiary) returns()
func (_Registry *RegistrySession) TransferCollectedFeeTo(_beneficiary common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferCollectedFeeTo(&_Registry.TransactOpts, _beneficiary)
}

// TransferCollectedFeeTo is a paid mutator transaction binding the contract method 0xe3252537.
//
// Solidity: function transferCollectedFeeTo(address _beneficiary) returns()
func (_Registry *RegistryTransactorSession) TransferCollectedFeeTo(_beneficiary common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferCollectedFeeTo(&_Registry.TransactOpts, _beneficiary)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// UpdateHermesURL is a paid mutator transaction binding the contract method 0xadd10dda.
//
// Solidity: function updateHermesURL(address _hermesId, bytes _url, bytes _signature) returns()
func (_Registry *RegistryTransactor) UpdateHermesURL(opts *bind.TransactOpts, _hermesId common.Address, _url []byte, _signature []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "updateHermesURL", _hermesId, _url, _signature)
}

// UpdateHermesURL is a paid mutator transaction binding the contract method 0xadd10dda.
//
// Solidity: function updateHermesURL(address _hermesId, bytes _url, bytes _signature) returns()
func (_Registry *RegistrySession) UpdateHermesURL(_hermesId common.Address, _url []byte, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.UpdateHermesURL(&_Registry.TransactOpts, _hermesId, _url, _signature)
}

// UpdateHermesURL is a paid mutator transaction binding the contract method 0xadd10dda.
//
// Solidity: function updateHermesURL(address _hermesId, bytes _url, bytes _signature) returns()
func (_Registry *RegistryTransactorSession) UpdateHermesURL(_hermesId common.Address, _url []byte, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.UpdateHermesURL(&_Registry.TransactOpts, _hermesId, _url, _signature)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Registry *RegistryTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Registry *RegistrySession) Receive() (*types.Transaction, error) {
	return _Registry.Contract.Receive(&_Registry.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Registry *RegistryTransactorSession) Receive() (*types.Transaction, error) {
	return _Registry.Contract.Receive(&_Registry.TransactOpts)
}

// RegistryBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the Registry contract.
type RegistryBeneficiaryChangedIterator struct {
	Event *RegistryBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryBeneficiaryChanged represents a BeneficiaryChanged event raised by the Registry contract.
type RegistryBeneficiaryChanged struct {
	Identity       common.Address
	NewBeneficiary common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed identity, address newBeneficiary)
func (_Registry *RegistryFilterer) FilterBeneficiaryChanged(opts *bind.FilterOpts, identity []common.Address) (*RegistryBeneficiaryChangedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "BeneficiaryChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return &RegistryBeneficiaryChangedIterator{contract: _Registry.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed identity, address newBeneficiary)
func (_Registry *RegistryFilterer) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *RegistryBeneficiaryChanged, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "BeneficiaryChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryBeneficiaryChanged)
				if err := _Registry.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed identity, address newBeneficiary)
func (_Registry *RegistryFilterer) ParseBeneficiaryChanged(log types.Log) (*RegistryBeneficiaryChanged, error) {
	event := new(RegistryBeneficiaryChanged)
	if err := _Registry.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryConsumerChannelCreatedIterator is returned from FilterConsumerChannelCreated and is used to iterate over the raw logs and unpacked data for ConsumerChannelCreated events raised by the Registry contract.
type RegistryConsumerChannelCreatedIterator struct {
	Event *RegistryConsumerChannelCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryConsumerChannelCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryConsumerChannelCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryConsumerChannelCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryConsumerChannelCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryConsumerChannelCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryConsumerChannelCreated represents a ConsumerChannelCreated event raised by the Registry contract.
type RegistryConsumerChannelCreated struct {
	Identity       common.Address
	HermesId       common.Address
	ChannelAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterConsumerChannelCreated is a free log retrieval operation binding the contract event 0x2ed7bcf2ff03098102c7003d7ce2a633e4b49b8198b07de5383cdf4c0ab9228b.
//
// Solidity: event ConsumerChannelCreated(address indexed identity, address indexed hermesId, address channelAddress)
func (_Registry *RegistryFilterer) FilterConsumerChannelCreated(opts *bind.FilterOpts, identity []common.Address, hermesId []common.Address) (*RegistryConsumerChannelCreatedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}
	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ConsumerChannelCreated", identityRule, hermesIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryConsumerChannelCreatedIterator{contract: _Registry.contract, event: "ConsumerChannelCreated", logs: logs, sub: sub}, nil
}

// WatchConsumerChannelCreated is a free log subscription operation binding the contract event 0x2ed7bcf2ff03098102c7003d7ce2a633e4b49b8198b07de5383cdf4c0ab9228b.
//
// Solidity: event ConsumerChannelCreated(address indexed identity, address indexed hermesId, address channelAddress)
func (_Registry *RegistryFilterer) WatchConsumerChannelCreated(opts *bind.WatchOpts, sink chan<- *RegistryConsumerChannelCreated, identity []common.Address, hermesId []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}
	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ConsumerChannelCreated", identityRule, hermesIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryConsumerChannelCreated)
				if err := _Registry.contract.UnpackLog(event, "ConsumerChannelCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConsumerChannelCreated is a log parse operation binding the contract event 0x2ed7bcf2ff03098102c7003d7ce2a633e4b49b8198b07de5383cdf4c0ab9228b.
//
// Solidity: event ConsumerChannelCreated(address indexed identity, address indexed hermesId, address channelAddress)
func (_Registry *RegistryFilterer) ParseConsumerChannelCreated(log types.Log) (*RegistryConsumerChannelCreated, error) {
	event := new(RegistryConsumerChannelCreated)
	if err := _Registry.contract.UnpackLog(event, "ConsumerChannelCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryDestinationChangedIterator is returned from FilterDestinationChanged and is used to iterate over the raw logs and unpacked data for DestinationChanged events raised by the Registry contract.
type RegistryDestinationChangedIterator struct {
	Event *RegistryDestinationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryDestinationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryDestinationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryDestinationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryDestinationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryDestinationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryDestinationChanged represents a DestinationChanged event raised by the Registry contract.
type RegistryDestinationChanged struct {
	PreviousDestination common.Address
	NewDestination      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDestinationChanged is a free log retrieval operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_Registry *RegistryFilterer) FilterDestinationChanged(opts *bind.FilterOpts, previousDestination []common.Address, newDestination []common.Address) (*RegistryDestinationChangedIterator, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return &RegistryDestinationChangedIterator{contract: _Registry.contract, event: "DestinationChanged", logs: logs, sub: sub}, nil
}

// WatchDestinationChanged is a free log subscription operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_Registry *RegistryFilterer) WatchDestinationChanged(opts *bind.WatchOpts, sink chan<- *RegistryDestinationChanged, previousDestination []common.Address, newDestination []common.Address) (event.Subscription, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryDestinationChanged)
				if err := _Registry.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDestinationChanged is a log parse operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_Registry *RegistryFilterer) ParseDestinationChanged(log types.Log) (*RegistryDestinationChanged, error) {
	event := new(RegistryDestinationChanged)
	if err := _Registry.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryHermesURLUpdatedIterator is returned from FilterHermesURLUpdated and is used to iterate over the raw logs and unpacked data for HermesURLUpdated events raised by the Registry contract.
type RegistryHermesURLUpdatedIterator struct {
	Event *RegistryHermesURLUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryHermesURLUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryHermesURLUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryHermesURLUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryHermesURLUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryHermesURLUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryHermesURLUpdated represents a HermesURLUpdated event raised by the Registry contract.
type RegistryHermesURLUpdated struct {
	HermesId common.Address
	NewURL   []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterHermesURLUpdated is a free log retrieval operation binding the contract event 0xd8c638c85547b8717e0d5ca292cff6dbe8fc02fa6e6863a047971c39511643c7.
//
// Solidity: event HermesURLUpdated(address indexed hermesId, bytes newURL)
func (_Registry *RegistryFilterer) FilterHermesURLUpdated(opts *bind.FilterOpts, hermesId []common.Address) (*RegistryHermesURLUpdatedIterator, error) {

	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "HermesURLUpdated", hermesIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryHermesURLUpdatedIterator{contract: _Registry.contract, event: "HermesURLUpdated", logs: logs, sub: sub}, nil
}

// WatchHermesURLUpdated is a free log subscription operation binding the contract event 0xd8c638c85547b8717e0d5ca292cff6dbe8fc02fa6e6863a047971c39511643c7.
//
// Solidity: event HermesURLUpdated(address indexed hermesId, bytes newURL)
func (_Registry *RegistryFilterer) WatchHermesURLUpdated(opts *bind.WatchOpts, sink chan<- *RegistryHermesURLUpdated, hermesId []common.Address) (event.Subscription, error) {

	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "HermesURLUpdated", hermesIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryHermesURLUpdated)
				if err := _Registry.contract.UnpackLog(event, "HermesURLUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesURLUpdated is a log parse operation binding the contract event 0xd8c638c85547b8717e0d5ca292cff6dbe8fc02fa6e6863a047971c39511643c7.
//
// Solidity: event HermesURLUpdated(address indexed hermesId, bytes newURL)
func (_Registry *RegistryFilterer) ParseHermesURLUpdated(log types.Log) (*RegistryHermesURLUpdated, error) {
	event := new(RegistryHermesURLUpdated)
	if err := _Registry.contract.UnpackLog(event, "HermesURLUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryMinimalHermesStakeChangedIterator is returned from FilterMinimalHermesStakeChanged and is used to iterate over the raw logs and unpacked data for MinimalHermesStakeChanged events raised by the Registry contract.
type RegistryMinimalHermesStakeChangedIterator struct {
	Event *RegistryMinimalHermesStakeChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryMinimalHermesStakeChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryMinimalHermesStakeChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryMinimalHermesStakeChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryMinimalHermesStakeChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryMinimalHermesStakeChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryMinimalHermesStakeChanged represents a MinimalHermesStakeChanged event raised by the Registry contract.
type RegistryMinimalHermesStakeChanged struct {
	NewMinimalStake *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMinimalHermesStakeChanged is a free log retrieval operation binding the contract event 0x645a9c74d34a0b1095b113252ad5e9afa0373f15b4b21760fb3a24b4b9d1ec30.
//
// Solidity: event MinimalHermesStakeChanged(uint256 newMinimalStake)
func (_Registry *RegistryFilterer) FilterMinimalHermesStakeChanged(opts *bind.FilterOpts) (*RegistryMinimalHermesStakeChangedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "MinimalHermesStakeChanged")
	if err != nil {
		return nil, err
	}
	return &RegistryMinimalHermesStakeChangedIterator{contract: _Registry.contract, event: "MinimalHermesStakeChanged", logs: logs, sub: sub}, nil
}

// WatchMinimalHermesStakeChanged is a free log subscription operation binding the contract event 0x645a9c74d34a0b1095b113252ad5e9afa0373f15b4b21760fb3a24b4b9d1ec30.
//
// Solidity: event MinimalHermesStakeChanged(uint256 newMinimalStake)
func (_Registry *RegistryFilterer) WatchMinimalHermesStakeChanged(opts *bind.WatchOpts, sink chan<- *RegistryMinimalHermesStakeChanged) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "MinimalHermesStakeChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryMinimalHermesStakeChanged)
				if err := _Registry.contract.UnpackLog(event, "MinimalHermesStakeChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimalHermesStakeChanged is a log parse operation binding the contract event 0x645a9c74d34a0b1095b113252ad5e9afa0373f15b4b21760fb3a24b4b9d1ec30.
//
// Solidity: event MinimalHermesStakeChanged(uint256 newMinimalStake)
func (_Registry *RegistryFilterer) ParseMinimalHermesStakeChanged(log types.Log) (*RegistryMinimalHermesStakeChanged, error) {
	event := new(RegistryMinimalHermesStakeChanged)
	if err := _Registry.contract.UnpackLog(event, "MinimalHermesStakeChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RegistryOwnershipTransferred, error) {
	event := new(RegistryOwnershipTransferred)
	if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRegisteredHermesIterator is returned from FilterRegisteredHermes and is used to iterate over the raw logs and unpacked data for RegisteredHermes events raised by the Registry contract.
type RegistryRegisteredHermesIterator struct {
	Event *RegistryRegisteredHermes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegisteredHermesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegisteredHermes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegisteredHermes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegisteredHermesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegisteredHermesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegisteredHermes represents a RegisteredHermes event raised by the Registry contract.
type RegistryRegisteredHermes struct {
	HermesId       common.Address
	HermesOperator common.Address
	Ur             []byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRegisteredHermes is a free log retrieval operation binding the contract event 0xf06d60cc2f463635fd237ad87f1d007af54840b82e7e4561707b1be63d91c260.
//
// Solidity: event RegisteredHermes(address indexed hermesId, address hermesOperator, bytes ur)
func (_Registry *RegistryFilterer) FilterRegisteredHermes(opts *bind.FilterOpts, hermesId []common.Address) (*RegistryRegisteredHermesIterator, error) {

	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegisteredHermes", hermesIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRegisteredHermesIterator{contract: _Registry.contract, event: "RegisteredHermes", logs: logs, sub: sub}, nil
}

// WatchRegisteredHermes is a free log subscription operation binding the contract event 0xf06d60cc2f463635fd237ad87f1d007af54840b82e7e4561707b1be63d91c260.
//
// Solidity: event RegisteredHermes(address indexed hermesId, address hermesOperator, bytes ur)
func (_Registry *RegistryFilterer) WatchRegisteredHermes(opts *bind.WatchOpts, sink chan<- *RegistryRegisteredHermes, hermesId []common.Address) (event.Subscription, error) {

	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegisteredHermes", hermesIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegisteredHermes)
				if err := _Registry.contract.UnpackLog(event, "RegisteredHermes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisteredHermes is a log parse operation binding the contract event 0xf06d60cc2f463635fd237ad87f1d007af54840b82e7e4561707b1be63d91c260.
//
// Solidity: event RegisteredHermes(address indexed hermesId, address hermesOperator, bytes ur)
func (_Registry *RegistryFilterer) ParseRegisteredHermes(log types.Log) (*RegistryRegisteredHermes, error) {
	event := new(RegistryRegisteredHermes)
	if err := _Registry.contract.UnpackLog(event, "RegisteredHermes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRegisteredIdentityIterator is returned from FilterRegisteredIdentity and is used to iterate over the raw logs and unpacked data for RegisteredIdentity events raised by the Registry contract.
type RegistryRegisteredIdentityIterator struct {
	Event *RegistryRegisteredIdentity // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegisteredIdentityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegisteredIdentity)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegisteredIdentity)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegisteredIdentityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegisteredIdentityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegisteredIdentity represents a RegisteredIdentity event raised by the Registry contract.
type RegistryRegisteredIdentity struct {
	Identity    common.Address
	Beneficiary common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegisteredIdentity is a free log retrieval operation binding the contract event 0xefaf768237c22e140a862d5d375ad5c153479fac3f8bcf8b580a1651fd62c3ef.
//
// Solidity: event RegisteredIdentity(address indexed identity, address beneficiary)
func (_Registry *RegistryFilterer) FilterRegisteredIdentity(opts *bind.FilterOpts, identity []common.Address) (*RegistryRegisteredIdentityIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegisteredIdentity", identityRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRegisteredIdentityIterator{contract: _Registry.contract, event: "RegisteredIdentity", logs: logs, sub: sub}, nil
}

// WatchRegisteredIdentity is a free log subscription operation binding the contract event 0xefaf768237c22e140a862d5d375ad5c153479fac3f8bcf8b580a1651fd62c3ef.
//
// Solidity: event RegisteredIdentity(address indexed identity, address beneficiary)
func (_Registry *RegistryFilterer) WatchRegisteredIdentity(opts *bind.WatchOpts, sink chan<- *RegistryRegisteredIdentity, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegisteredIdentity", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegisteredIdentity)
				if err := _Registry.contract.UnpackLog(event, "RegisteredIdentity", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisteredIdentity is a log parse operation binding the contract event 0xefaf768237c22e140a862d5d375ad5c153479fac3f8bcf8b580a1651fd62c3ef.
//
// Solidity: event RegisteredIdentity(address indexed identity, address beneficiary)
func (_Registry *RegistryFilterer) ParseRegisteredIdentity(log types.Log) (*RegistryRegisteredIdentity, error) {
	event := new(RegistryRegisteredIdentity)
	if err := _Registry.contract.UnpackLog(event, "RegisteredIdentity", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
